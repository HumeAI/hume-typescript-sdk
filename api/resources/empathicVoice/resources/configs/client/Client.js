/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";
export class Configs {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Fetches a paginated list of **Configs**.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {Hume.empathicVoice.ConfigsListConfigsRequest} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.listConfigs({
     *         pageNumber: 0,
     *         pageSize: 1
     *     })
     */
    listConfigs() {
        return __awaiter(this, arguments, void 0, function* (request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) =>
                __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d;
                    const { pageNumber, pageSize, restrictToMostRecent, name } = request;
                    const _queryParams = {};
                    if (pageNumber != null) {
                        _queryParams["page_number"] = pageNumber.toString();
                    }
                    if (pageSize != null) {
                        _queryParams["page_size"] = pageSize.toString();
                    }
                    if (restrictToMostRecent != null) {
                        _queryParams["restrict_to_most_recent"] = restrictToMostRecent.toString();
                    }
                    if (name != null) {
                        _queryParams["name"] = name;
                    }
                    const _response = yield (
                        (_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher
                    )({
                        url: urlJoin(
                            (_c =
                                (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                                    ? _b
                                    : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                                ? _c
                                : environments.HumeEnvironment.Production,
                            "v0/evi/configs",
                        ),
                        method: "GET",
                        headers: mergeHeaders(
                            (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                            mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                        ),
                        queryParameters: _queryParams,
                        timeoutMs:
                            (requestOptions === null || requestOptions === void 0
                                ? void 0
                                : requestOptions.timeoutInSeconds) != null
                                ? requestOptions.timeoutInSeconds * 1000
                                : 60000,
                        maxRetries:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                        abortSignal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                    });
                    if (_response.ok) {
                        return {
                            data: serializers.empathicVoice.ReturnPagedConfigs.parseOrThrow(_response.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            rawResponse: _response.rawResponse,
                        };
                    }
                    if (_response.error.reason === "status-code") {
                        switch (_response.error.statusCode) {
                            case 400:
                                throw new Hume.empathicVoice.BadRequestError(
                                    serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                        unrecognizedObjectKeys: "passthrough",
                                        allowUnrecognizedUnionMembers: true,
                                        allowUnrecognizedEnumValues: true,
                                        breadcrumbsPrefix: ["response"],
                                    }),
                                    _response.rawResponse,
                                );
                            default:
                                throw new errors.HumeError({
                                    statusCode: _response.error.statusCode,
                                    body: _response.error.body,
                                    rawResponse: _response.rawResponse,
                                });
                        }
                    }
                    switch (_response.error.reason) {
                        case "non-json":
                            throw new errors.HumeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.rawBody,
                                rawResponse: _response.rawResponse,
                            });
                        case "timeout":
                            throw new errors.HumeTimeoutError("Timeout exceeded when calling GET /v0/evi/configs.");
                        case "unknown":
                            throw new errors.HumeError({
                                message: _response.error.errorMessage,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }),
            );
            let _offset =
                (request === null || request === void 0 ? void 0 : request.pageNumber) != null
                    ? request === null || request === void 0
                        ? void 0
                        : request.pageNumber
                    : 0;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => {
                    var _a;
                    return (
                        ((_a = response === null || response === void 0 ? void 0 : response.configsPage) !== null &&
                        _a !== void 0
                            ? _a
                            : []
                        ).length > 0
                    );
                },
                getItems: (response) => {
                    var _a;
                    return (_a = response === null || response === void 0 ? void 0 : response.configsPage) !== null &&
                        _a !== void 0
                        ? _a
                        : [];
                },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "pageNumber", _offset));
                },
            });
        });
    }
    /**
     * Creates a **Config** which can be applied to EVI.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {Hume.empathicVoice.PostedConfig} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.createConfig({
     *         name: "Weather Assistant Config",
     *         prompt: {
     *             id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
     *             version: 0
     *         },
     *         eviVersion: "3",
     *         voice: {
     *             provider: "HUME_AI",
     *             name: "Ava Song"
     *         },
     *         languageModel: {
     *             modelProvider: "ANTHROPIC",
     *             modelResource: "claude-3-7-sonnet-latest",
     *             temperature: 1
     *         },
     *         eventMessages: {
     *             onNewChat: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onInactivityTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onMaxDurationTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             }
     *         }
     *     })
     */
    createConfig(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createConfig(request, requestOptions));
    }
    __createConfig(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/evi/configs",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.ReturnConfig.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/evi/configs.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Fetches a list of a **Config's** versions.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Hume.empathicVoice.ConfigsListConfigVersionsRequest} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.listConfigVersions("1b60e1a0-cc59-424a-8d2c-189d354db3f3")
     */
    listConfigVersions(id_1) {
        return __awaiter(this, arguments, void 0, function* (id, request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) =>
                __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d;
                    const { pageNumber, pageSize, restrictToMostRecent } = request;
                    const _queryParams = {};
                    if (pageNumber != null) {
                        _queryParams["page_number"] = pageNumber.toString();
                    }
                    if (pageSize != null) {
                        _queryParams["page_size"] = pageSize.toString();
                    }
                    if (restrictToMostRecent != null) {
                        _queryParams["restrict_to_most_recent"] = restrictToMostRecent.toString();
                    }
                    const _response = yield (
                        (_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher
                    )({
                        url: urlJoin(
                            (_c =
                                (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                                    ? _b
                                    : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                                ? _c
                                : environments.HumeEnvironment.Production,
                            `v0/evi/configs/${encodeURIComponent(id)}`,
                        ),
                        method: "GET",
                        headers: mergeHeaders(
                            (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                            mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                        ),
                        queryParameters: _queryParams,
                        timeoutMs:
                            (requestOptions === null || requestOptions === void 0
                                ? void 0
                                : requestOptions.timeoutInSeconds) != null
                                ? requestOptions.timeoutInSeconds * 1000
                                : 60000,
                        maxRetries:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                        abortSignal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                    });
                    if (_response.ok) {
                        return {
                            data: serializers.empathicVoice.ReturnPagedConfigs.parseOrThrow(_response.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            rawResponse: _response.rawResponse,
                        };
                    }
                    if (_response.error.reason === "status-code") {
                        switch (_response.error.statusCode) {
                            case 400:
                                throw new Hume.empathicVoice.BadRequestError(
                                    serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                        unrecognizedObjectKeys: "passthrough",
                                        allowUnrecognizedUnionMembers: true,
                                        allowUnrecognizedEnumValues: true,
                                        breadcrumbsPrefix: ["response"],
                                    }),
                                    _response.rawResponse,
                                );
                            default:
                                throw new errors.HumeError({
                                    statusCode: _response.error.statusCode,
                                    body: _response.error.body,
                                    rawResponse: _response.rawResponse,
                                });
                        }
                    }
                    switch (_response.error.reason) {
                        case "non-json":
                            throw new errors.HumeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.rawBody,
                                rawResponse: _response.rawResponse,
                            });
                        case "timeout":
                            throw new errors.HumeTimeoutError(
                                "Timeout exceeded when calling GET /v0/evi/configs/{id}.",
                            );
                        case "unknown":
                            throw new errors.HumeError({
                                message: _response.error.errorMessage,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }),
            );
            let _offset =
                (request === null || request === void 0 ? void 0 : request.pageNumber) != null
                    ? request === null || request === void 0
                        ? void 0
                        : request.pageNumber
                    : 0;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => {
                    var _a;
                    return (
                        ((_a = response === null || response === void 0 ? void 0 : response.configsPage) !== null &&
                        _a !== void 0
                            ? _a
                            : []
                        ).length > 0
                    );
                },
                getItems: (response) => {
                    var _a;
                    return (_a = response === null || response === void 0 ? void 0 : response.configsPage) !== null &&
                        _a !== void 0
                        ? _a
                        : [];
                },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "pageNumber", _offset));
                },
            });
        });
    }
    /**
     * Updates a **Config** by creating a new version of the **Config**.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedConfigVersion} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.createConfigVersion("1b60e1a0-cc59-424a-8d2c-189d354db3f3", {
     *         versionDescription: "This is an updated version of the Weather Assistant Config.",
     *         eviVersion: "3",
     *         prompt: {
     *             id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
     *             version: 0
     *         },
     *         voice: {
     *             provider: "HUME_AI",
     *             name: "Ava Song"
     *         },
     *         languageModel: {
     *             modelProvider: "ANTHROPIC",
     *             modelResource: "claude-3-7-sonnet-latest",
     *             temperature: 1
     *         },
     *         ellmModel: {
     *             allowShortResponses: true
     *         },
     *         eventMessages: {
     *             onNewChat: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onInactivityTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             },
     *             onMaxDurationTimeout: {
     *                 enabled: false,
     *                 text: ""
     *             }
     *         }
     *     })
     */
    createConfigVersion(id, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createConfigVersion(id, request, requestOptions));
    }
    __createConfigVersion(id, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/configs/${encodeURIComponent(id)}`,
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedConfigVersion.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.ReturnConfig.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/evi/configs/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a **Config** and its versions.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.deleteConfig("1b60e1a0-cc59-424a-8d2c-189d354db3f3")
     */
    deleteConfig(id, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__deleteConfig(id, requestOptions));
    }
    __deleteConfig(id, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/configs/${encodeURIComponent(id)}`,
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling DELETE /v0/evi/configs/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates the name of a **Config**.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedConfigName} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.updateConfigName("1b60e1a0-cc59-424a-8d2c-189d354db3f3", {
     *         name: "Updated Weather Assistant Config Name"
     *     })
     */
    updateConfigName(id, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__updateConfigName(id, request, requestOptions));
    }
    __updateConfigName(id, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/configs/${encodeURIComponent(id)}`,
                ),
                method: "PATCH",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedConfigName.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                responseType: "text",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling PATCH /v0/evi/configs/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Fetches a specified version of a **Config**.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {number} version - Version number for a Config.
     *
     *                           Configs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.getConfigVersion("1b60e1a0-cc59-424a-8d2c-189d354db3f3", 1)
     */
    getConfigVersion(id, version, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getConfigVersion(id, version, requestOptions));
    }
    __getConfigVersion(id, version, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/configs/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "GET",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.ReturnConfig.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling GET /v0/evi/configs/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a specified version of a **Config**.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {number} version - Version number for a Config.
     *
     *                           Configs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.deleteConfigVersion("1b60e1a0-cc59-424a-8d2c-189d354db3f3", 1)
     */
    deleteConfigVersion(id, version, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__deleteConfigVersion(id, version, requestOptions));
    }
    __deleteConfigVersion(id, version, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/configs/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling DELETE /v0/evi/configs/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates the description of a **Config**.
     *
     * For more details on configuration options and how to configure EVI, see our [configuration guide](/docs/speech-to-speech-evi/configuration).
     *
     * @param {string} id - Identifier for a Config. Formatted as a UUID.
     * @param {number} version - Version number for a Config.
     *
     *                           Configs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.
     * @param {Hume.empathicVoice.PostedConfigVersionDescription} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.configs.updateConfigDescription("1b60e1a0-cc59-424a-8d2c-189d354db3f3", 1, {
     *         versionDescription: "This is an updated version_description."
     *     })
     */
    updateConfigDescription(id, version, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(
            this.__updateConfigDescription(id, version, request, requestOptions),
        );
    }
    __updateConfigDescription(id_1, version_1) {
        return __awaiter(this, arguments, void 0, function* (id, version, request = {}, requestOptions) {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/configs/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "PATCH",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedConfigVersionDescription.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.ReturnConfig.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling PATCH /v0/evi/configs/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "X-Hume-Api-Key": apiKeyValue };
        });
    }
}
