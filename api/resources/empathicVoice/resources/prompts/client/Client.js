/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";
export class Prompts {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Fetches a paginated list of **Prompts**.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {Hume.empathicVoice.PromptsListPromptsRequest} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.listPrompts({
     *         pageNumber: 0,
     *         pageSize: 2
     *     })
     */
    listPrompts() {
        return __awaiter(this, arguments, void 0, function* (request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) =>
                __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d;
                    const { pageNumber, pageSize, restrictToMostRecent, name } = request;
                    const _queryParams = {};
                    if (pageNumber != null) {
                        _queryParams["page_number"] = pageNumber.toString();
                    }
                    if (pageSize != null) {
                        _queryParams["page_size"] = pageSize.toString();
                    }
                    if (restrictToMostRecent != null) {
                        _queryParams["restrict_to_most_recent"] = restrictToMostRecent.toString();
                    }
                    if (name != null) {
                        _queryParams["name"] = name;
                    }
                    const _response = yield (
                        (_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher
                    )({
                        url: urlJoin(
                            (_c =
                                (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                                    ? _b
                                    : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                                ? _c
                                : environments.HumeEnvironment.Production,
                            "v0/evi/prompts",
                        ),
                        method: "GET",
                        headers: mergeHeaders(
                            (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                            mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                        ),
                        queryParameters: _queryParams,
                        timeoutMs:
                            (requestOptions === null || requestOptions === void 0
                                ? void 0
                                : requestOptions.timeoutInSeconds) != null
                                ? requestOptions.timeoutInSeconds * 1000
                                : 60000,
                        maxRetries:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                        abortSignal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                    });
                    if (_response.ok) {
                        return {
                            data: serializers.empathicVoice.ReturnPagedPrompts.parseOrThrow(_response.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            rawResponse: _response.rawResponse,
                        };
                    }
                    if (_response.error.reason === "status-code") {
                        switch (_response.error.statusCode) {
                            case 400:
                                throw new Hume.empathicVoice.BadRequestError(
                                    serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                        unrecognizedObjectKeys: "passthrough",
                                        allowUnrecognizedUnionMembers: true,
                                        allowUnrecognizedEnumValues: true,
                                        breadcrumbsPrefix: ["response"],
                                    }),
                                    _response.rawResponse,
                                );
                            default:
                                throw new errors.HumeError({
                                    statusCode: _response.error.statusCode,
                                    body: _response.error.body,
                                    rawResponse: _response.rawResponse,
                                });
                        }
                    }
                    switch (_response.error.reason) {
                        case "non-json":
                            throw new errors.HumeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.rawBody,
                                rawResponse: _response.rawResponse,
                            });
                        case "timeout":
                            throw new errors.HumeTimeoutError("Timeout exceeded when calling GET /v0/evi/prompts.");
                        case "unknown":
                            throw new errors.HumeError({
                                message: _response.error.errorMessage,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }),
            );
            let _offset =
                (request === null || request === void 0 ? void 0 : request.pageNumber) != null
                    ? request === null || request === void 0
                        ? void 0
                        : request.pageNumber
                    : 0;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => {
                    var _a;
                    return (
                        ((_a = response === null || response === void 0 ? void 0 : response.promptsPage) !== null &&
                        _a !== void 0
                            ? _a
                            : []
                        ).length > 0
                    );
                },
                getItems: (response) => {
                    var _a;
                    return (_a = response === null || response === void 0 ? void 0 : response.promptsPage) !== null &&
                        _a !== void 0
                        ? _a
                        : [];
                },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "pageNumber", _offset));
                },
            });
        });
    }
    /**
     * Creates a **Prompt** that can be added to an [EVI configuration](/reference/speech-to-speech-evi/configs/create-config).
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {Hume.empathicVoice.PostedPrompt} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.createPrompt({
     *         name: "Weather Assistant Prompt",
     *         text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
     *     })
     */
    createPrompt(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createPrompt(request, requestOptions));
    }
    __createPrompt(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/evi/prompts",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedPrompt.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.prompts.createPrompt.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/evi/prompts.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Fetches a list of a **Prompt's** versions.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {Hume.empathicVoice.PromptsListPromptVersionsRequest} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.listPromptVersions("af699d45-2985-42cc-91b9-af9e5da3bac5")
     */
    listPromptVersions(id, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__listPromptVersions(id, request, requestOptions));
    }
    __listPromptVersions(id_1) {
        return __awaiter(this, arguments, void 0, function* (id, request = {}, requestOptions) {
            var _a, _b, _c, _d;
            const { pageNumber, pageSize, restrictToMostRecent } = request;
            const _queryParams = {};
            if (pageNumber != null) {
                _queryParams["page_number"] = pageNumber.toString();
            }
            if (pageSize != null) {
                _queryParams["page_size"] = pageSize.toString();
            }
            if (restrictToMostRecent != null) {
                _queryParams["restrict_to_most_recent"] = restrictToMostRecent.toString();
            }
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}`,
                ),
                method: "GET",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                queryParameters: _queryParams,
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.ReturnPagedPrompts.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling GET /v0/evi/prompts/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates a **Prompt** by creating a new version of the **Prompt**.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedPromptVersion} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.createPromptVersion("af699d45-2985-42cc-91b9-af9e5da3bac5", {
     *         text: "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
     *         versionDescription: "This is an updated version of the Weather Assistant Prompt."
     *     })
     */
    createPromptVersion(id, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createPromptVersion(id, request, requestOptions));
    }
    __createPromptVersion(id, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}`,
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedPromptVersion.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.prompts.createPromptVersion.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/evi/prompts/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a **Prompt** and its versions.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.deletePrompt("af699d45-2985-42cc-91b9-af9e5da3bac5")
     */
    deletePrompt(id, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__deletePrompt(id, requestOptions));
    }
    __deletePrompt(id, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}`,
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling DELETE /v0/evi/prompts/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates the name of a **Prompt**.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedPromptName} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.updatePromptName("af699d45-2985-42cc-91b9-af9e5da3bac5", {
     *         name: "Updated Weather Assistant Prompt Name"
     *     })
     */
    updatePromptName(id, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__updatePromptName(id, request, requestOptions));
    }
    __updatePromptName(id, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}`,
                ),
                method: "PATCH",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedPromptName.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                responseType: "text",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling PATCH /v0/evi/prompts/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Fetches a specified version of a **Prompt**.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {number} version - Version number for a Prompt.
     *
     *                           Prompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.getPromptVersion("af699d45-2985-42cc-91b9-af9e5da3bac5", 0)
     */
    getPromptVersion(id, version, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getPromptVersion(id, version, requestOptions));
    }
    __getPromptVersion(id, version, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "GET",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.prompts.getPromptVersion.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling GET /v0/evi/prompts/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a specified version of a **Prompt**.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {number} version - Version number for a Prompt.
     *
     *                           Prompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.deletePromptVersion("af699d45-2985-42cc-91b9-af9e5da3bac5", 1)
     */
    deletePromptVersion(id, version, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__deletePromptVersion(id, version, requestOptions));
    }
    __deletePromptVersion(id, version, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling DELETE /v0/evi/prompts/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates the description of a **Prompt**.
     *
     * See our [prompting guide](/docs/speech-to-speech-evi/guides/phone-calling) for tips on crafting your system prompt.
     *
     * @param {string} id - Identifier for a Prompt. Formatted as a UUID.
     * @param {number} version - Version number for a Prompt.
     *
     *                           Prompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.
     * @param {Hume.empathicVoice.PostedPromptVersionDescription} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.prompts.updatePromptDescription("af699d45-2985-42cc-91b9-af9e5da3bac5", 1, {
     *         versionDescription: "This is an updated version_description."
     *     })
     */
    updatePromptDescription(id, version, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(
            this.__updatePromptDescription(id, version, request, requestOptions),
        );
    }
    __updatePromptDescription(id_1, version_1) {
        return __awaiter(this, arguments, void 0, function* (id, version, request = {}, requestOptions) {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/prompts/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "PATCH",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedPromptVersionDescription.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.prompts.updatePromptDescription.Response.parseOrThrow(
                        _response.body,
                        {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        },
                    ),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling PATCH /v0/evi/prompts/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "X-Hume-Api-Key": apiKeyValue };
        });
    }
}
