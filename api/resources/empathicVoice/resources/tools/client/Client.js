/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";
export class Tools {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Fetches a paginated list of **Tools**.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {Hume.empathicVoice.ToolsListToolsRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.listTools({
     *         pageNumber: 0,
     *         pageSize: 2
     *     })
     */
    listTools() {
        return __awaiter(this, arguments, void 0, function* (request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) =>
                __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d;
                    const { pageNumber, pageSize, restrictToMostRecent, name } = request;
                    const _queryParams = {};
                    if (pageNumber != null) {
                        _queryParams["page_number"] = pageNumber.toString();
                    }
                    if (pageSize != null) {
                        _queryParams["page_size"] = pageSize.toString();
                    }
                    if (restrictToMostRecent != null) {
                        _queryParams["restrict_to_most_recent"] = restrictToMostRecent.toString();
                    }
                    if (name != null) {
                        _queryParams["name"] = name;
                    }
                    const _response = yield (
                        (_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher
                    )({
                        url: urlJoin(
                            (_c =
                                (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                                    ? _b
                                    : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                                ? _c
                                : environments.HumeEnvironment.Production,
                            "v0/evi/tools",
                        ),
                        method: "GET",
                        headers: mergeHeaders(
                            (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                            mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                        ),
                        queryParameters: _queryParams,
                        timeoutMs:
                            (requestOptions === null || requestOptions === void 0
                                ? void 0
                                : requestOptions.timeoutInSeconds) != null
                                ? requestOptions.timeoutInSeconds * 1000
                                : 60000,
                        maxRetries:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                        abortSignal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                    });
                    if (_response.ok) {
                        return {
                            data: serializers.empathicVoice.ReturnPagedUserDefinedTools.parseOrThrow(_response.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            rawResponse: _response.rawResponse,
                        };
                    }
                    if (_response.error.reason === "status-code") {
                        switch (_response.error.statusCode) {
                            case 400:
                                throw new Hume.empathicVoice.BadRequestError(
                                    serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                        unrecognizedObjectKeys: "passthrough",
                                        allowUnrecognizedUnionMembers: true,
                                        allowUnrecognizedEnumValues: true,
                                        breadcrumbsPrefix: ["response"],
                                    }),
                                    _response.rawResponse,
                                );
                            default:
                                throw new errors.HumeError({
                                    statusCode: _response.error.statusCode,
                                    body: _response.error.body,
                                    rawResponse: _response.rawResponse,
                                });
                        }
                    }
                    switch (_response.error.reason) {
                        case "non-json":
                            throw new errors.HumeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.rawBody,
                                rawResponse: _response.rawResponse,
                            });
                        case "timeout":
                            throw new errors.HumeTimeoutError("Timeout exceeded when calling GET /v0/evi/tools.");
                        case "unknown":
                            throw new errors.HumeError({
                                message: _response.error.errorMessage,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }),
            );
            let _offset =
                (request === null || request === void 0 ? void 0 : request.pageNumber) != null
                    ? request === null || request === void 0
                        ? void 0
                        : request.pageNumber
                    : 0;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => {
                    var _a;
                    return (
                        ((_a = response === null || response === void 0 ? void 0 : response.toolsPage) !== null &&
                        _a !== void 0
                            ? _a
                            : []
                        ).length > 0
                    );
                },
                getItems: (response) => {
                    var _a;
                    return (_a = response === null || response === void 0 ? void 0 : response.toolsPage) !== null &&
                        _a !== void 0
                        ? _a
                        : [];
                },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "pageNumber", _offset));
                },
            });
        });
    }
    /**
     * Creates a **Tool** that can be added to an [EVI configuration](/reference/speech-to-speech-evi/configs/create-config).
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {Hume.empathicVoice.PostedUserDefinedTool} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.createTool({
     *         name: "get_current_weather",
     *         parameters: "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
     *         versionDescription: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
     *         description: "This tool is for getting the current weather.",
     *         fallbackContent: "Unable to fetch current weather."
     *     })
     */
    createTool(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createTool(request, requestOptions));
    }
    __createTool(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/evi/tools",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedUserDefinedTool.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.tools.createTool.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/evi/tools.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Fetches a list of a **Tool's** versions.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.ToolsListToolVersionsRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.listToolVersions("00183a3f-79ba-413d-9f3b-609864268bea")
     */
    listToolVersions(id_1) {
        return __awaiter(this, arguments, void 0, function* (id, request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) =>
                __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d;
                    const { pageNumber, pageSize, restrictToMostRecent } = request;
                    const _queryParams = {};
                    if (pageNumber != null) {
                        _queryParams["page_number"] = pageNumber.toString();
                    }
                    if (pageSize != null) {
                        _queryParams["page_size"] = pageSize.toString();
                    }
                    if (restrictToMostRecent != null) {
                        _queryParams["restrict_to_most_recent"] = restrictToMostRecent.toString();
                    }
                    const _response = yield (
                        (_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher
                    )({
                        url: urlJoin(
                            (_c =
                                (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                                    ? _b
                                    : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                                ? _c
                                : environments.HumeEnvironment.Production,
                            `v0/evi/tools/${encodeURIComponent(id)}`,
                        ),
                        method: "GET",
                        headers: mergeHeaders(
                            (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                            mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                        ),
                        queryParameters: _queryParams,
                        timeoutMs:
                            (requestOptions === null || requestOptions === void 0
                                ? void 0
                                : requestOptions.timeoutInSeconds) != null
                                ? requestOptions.timeoutInSeconds * 1000
                                : 60000,
                        maxRetries:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                        abortSignal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                    });
                    if (_response.ok) {
                        return {
                            data: serializers.empathicVoice.ReturnPagedUserDefinedTools.parseOrThrow(_response.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            rawResponse: _response.rawResponse,
                        };
                    }
                    if (_response.error.reason === "status-code") {
                        switch (_response.error.statusCode) {
                            case 400:
                                throw new Hume.empathicVoice.BadRequestError(
                                    serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                        unrecognizedObjectKeys: "passthrough",
                                        allowUnrecognizedUnionMembers: true,
                                        allowUnrecognizedEnumValues: true,
                                        breadcrumbsPrefix: ["response"],
                                    }),
                                    _response.rawResponse,
                                );
                            default:
                                throw new errors.HumeError({
                                    statusCode: _response.error.statusCode,
                                    body: _response.error.body,
                                    rawResponse: _response.rawResponse,
                                });
                        }
                    }
                    switch (_response.error.reason) {
                        case "non-json":
                            throw new errors.HumeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.rawBody,
                                rawResponse: _response.rawResponse,
                            });
                        case "timeout":
                            throw new errors.HumeTimeoutError("Timeout exceeded when calling GET /v0/evi/tools/{id}.");
                        case "unknown":
                            throw new errors.HumeError({
                                message: _response.error.errorMessage,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }),
            );
            let _offset =
                (request === null || request === void 0 ? void 0 : request.pageNumber) != null
                    ? request === null || request === void 0
                        ? void 0
                        : request.pageNumber
                    : 0;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => {
                    var _a;
                    return (
                        ((_a = response === null || response === void 0 ? void 0 : response.toolsPage) !== null &&
                        _a !== void 0
                            ? _a
                            : []
                        ).length > 0
                    );
                },
                getItems: (response) => {
                    var _a;
                    return (_a = response === null || response === void 0 ? void 0 : response.toolsPage) !== null &&
                        _a !== void 0
                        ? _a
                        : [];
                },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "pageNumber", _offset));
                },
            });
        });
    }
    /**
     * Updates a **Tool** by creating a new version of the **Tool**.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedUserDefinedToolVersion} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.createToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", {
     *         parameters: "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
     *         versionDescription: "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
     *         fallbackContent: "Unable to fetch current weather.",
     *         description: "This tool is for getting the current weather."
     *     })
     */
    createToolVersion(id, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__createToolVersion(id, request, requestOptions));
    }
    __createToolVersion(id, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/tools/${encodeURIComponent(id)}`,
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedUserDefinedToolVersion.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.tools.createToolVersion.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/evi/tools/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a **Tool** and its versions.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.deleteTool("00183a3f-79ba-413d-9f3b-609864268bea")
     */
    deleteTool(id, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__deleteTool(id, requestOptions));
    }
    __deleteTool(id, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/tools/${encodeURIComponent(id)}`,
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling DELETE /v0/evi/tools/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates the name of a **Tool**.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedUserDefinedToolName} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.updateToolName("00183a3f-79ba-413d-9f3b-609864268bea", {
     *         name: "get_current_temperature"
     *     })
     */
    updateToolName(id, request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__updateToolName(id, request, requestOptions));
    }
    __updateToolName(id, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/tools/${encodeURIComponent(id)}`,
                ),
                method: "PATCH",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedUserDefinedToolName.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                responseType: "text",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling PATCH /v0/evi/tools/{id}.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Fetches a specified version of a **Tool**.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {number} version - Version number for a Tool.
     *
     *                           Tools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.getToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1)
     */
    getToolVersion(id, version, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__getToolVersion(id, version, requestOptions));
    }
    __getToolVersion(id, version, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/tools/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "GET",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.tools.getToolVersion.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling GET /v0/evi/tools/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a specified version of a **Tool**.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {number} version - Version number for a Tool.
     *
     *                           Tools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.deleteToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1)
     */
    deleteToolVersion(id, version, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__deleteToolVersion(id, version, requestOptions));
    }
    __deleteToolVersion(id, version, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/tools/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling DELETE /v0/evi/tools/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Updates the description of a specified **Tool** version.
     *
     * Refer to our [tool use](/docs/speech-to-speech-evi/features/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {number} version - Version number for a Tool.
     *
     *                           Tools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.
     * @param {Hume.empathicVoice.PostedUserDefinedToolVersionDescription} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.updateToolDescription("00183a3f-79ba-413d-9f3b-609864268bea", 1, {
     *         versionDescription: "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
     *     })
     */
    updateToolDescription(id, version, request = {}, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__updateToolDescription(id, version, request, requestOptions));
    }
    __updateToolDescription(id_1, version_1) {
        return __awaiter(this, arguments, void 0, function* (id, version, request = {}, requestOptions) {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    `v0/evi/tools/${encodeURIComponent(id)}/version/${encodeURIComponent(version)}`,
                ),
                method: "PATCH",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.empathicVoice.PostedUserDefinedToolVersionDescription.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.empathicVoice.tools.updateToolDescription.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.empathicVoice.BadRequestError(
                            serializers.empathicVoice.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError(
                        "Timeout exceeded when calling PATCH /v0/evi/tools/{id}/version/{version}.",
                    );
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "X-Hume-Api-Key": apiKeyValue };
        });
    }
}
