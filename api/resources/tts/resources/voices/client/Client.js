/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";
export class Voices {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Lists voices you have saved in your account, or voices from the [Voice Library](https://platform.hume.ai/tts/voice-library).
     *
     * @param {Hume.tts.VoicesListRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.tts.BadRequestError}
     *
     * @example
     *     await client.tts.voices.list({
     *         provider: "CUSTOM_VOICE"
     *     })
     */
    list(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const list = core.HttpResponsePromise.interceptFunction((request) =>
                __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d;
                    const { provider, pageNumber, pageSize, ascendingOrder } = request;
                    const _queryParams = {};
                    _queryParams["provider"] = serializers.tts.VoiceProvider.jsonOrThrow(provider, {
                        unrecognizedObjectKeys: "strip",
                    });
                    if (pageNumber != null) {
                        _queryParams["page_number"] = pageNumber.toString();
                    }
                    if (pageSize != null) {
                        _queryParams["page_size"] = pageSize.toString();
                    }
                    if (ascendingOrder != null) {
                        _queryParams["ascending_order"] = ascendingOrder.toString();
                    }
                    const _response = yield (
                        (_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher
                    )({
                        url: urlJoin(
                            (_c =
                                (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                                    ? _b
                                    : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                                ? _c
                                : environments.HumeEnvironment.Production,
                            "v0/tts/voices",
                        ),
                        method: "GET",
                        headers: mergeHeaders(
                            (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                            mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                        ),
                        queryParameters: _queryParams,
                        timeoutMs:
                            (requestOptions === null || requestOptions === void 0
                                ? void 0
                                : requestOptions.timeoutInSeconds) != null
                                ? requestOptions.timeoutInSeconds * 1000
                                : 60000,
                        maxRetries:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                        abortSignal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                    });
                    if (_response.ok) {
                        return {
                            data: serializers.tts.ReturnPagedVoices.parseOrThrow(_response.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            rawResponse: _response.rawResponse,
                        };
                    }
                    if (_response.error.reason === "status-code") {
                        switch (_response.error.statusCode) {
                            case 400:
                                throw new Hume.tts.BadRequestError(
                                    serializers.tts.ErrorResponse.parseOrThrow(_response.error.body, {
                                        unrecognizedObjectKeys: "passthrough",
                                        allowUnrecognizedUnionMembers: true,
                                        allowUnrecognizedEnumValues: true,
                                        breadcrumbsPrefix: ["response"],
                                    }),
                                    _response.rawResponse,
                                );
                            default:
                                throw new errors.HumeError({
                                    statusCode: _response.error.statusCode,
                                    body: _response.error.body,
                                    rawResponse: _response.rawResponse,
                                });
                        }
                    }
                    switch (_response.error.reason) {
                        case "non-json":
                            throw new errors.HumeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.rawBody,
                                rawResponse: _response.rawResponse,
                            });
                        case "timeout":
                            throw new errors.HumeTimeoutError("Timeout exceeded when calling GET /v0/tts/voices.");
                        case "unknown":
                            throw new errors.HumeError({
                                message: _response.error.errorMessage,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }),
            );
            let _offset =
                (request === null || request === void 0 ? void 0 : request.pageNumber) != null
                    ? request === null || request === void 0
                        ? void 0
                        : request.pageNumber
                    : 0;
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => {
                    var _a;
                    return (
                        ((_a = response === null || response === void 0 ? void 0 : response.voicesPage) !== null &&
                        _a !== void 0
                            ? _a
                            : []
                        ).length > 0
                    );
                },
                getItems: (response) => {
                    var _a;
                    return (_a = response === null || response === void 0 ? void 0 : response.voicesPage) !== null &&
                        _a !== void 0
                        ? _a
                        : [];
                },
                loadPage: (_response) => {
                    _offset += 1;
                    return list(core.setObjectProperty(request, "pageNumber", _offset));
                },
            });
        });
    }
    /**
     * Saves a new custom voice to your account using the specified TTS generation ID.
     *
     * Once saved, this voice can be reused in subsequent TTS requests, ensuring consistent speech style and prosody. For more details on voice creation, see the [Voices Guide](/docs/text-to-speech-tts/voices).
     *
     * @param {Hume.tts.PostedVoice} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.tts.UnprocessableEntityError}
     *
     * @example
     *     await client.tts.voices.create({
     *         generationId: "795c949a-1510-4a80-9646-7d0863b023ab",
     *         name: "David Hume"
     *     })
     */
    create(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }
    __create(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/tts/voices",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.tts.PostedVoice.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.tts.ReturnVoice.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Hume.tts.UnprocessableEntityError(
                            serializers.tts.HttpValidationError.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/tts/voices.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Deletes a previously generated custom voice.
     *
     * @param {Hume.tts.VoicesDeleteRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.tts.BadRequestError}
     *
     * @example
     *     await client.tts.voices.delete({
     *         name: "David Hume"
     *     })
     */
    delete(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__delete(request, requestOptions));
    }
    __delete(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const { name } = request;
            const _queryParams = {};
            _queryParams["name"] = name;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/tts/voices",
                ),
                method: "DELETE",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                queryParameters: _queryParams,
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: undefined, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new Hume.tts.BadRequestError(
                            serializers.tts.ErrorResponse.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling DELETE /v0/tts/voices.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "X-Hume-Api-Key": apiKeyValue };
        });
    }
}
