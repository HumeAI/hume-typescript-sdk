/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Hume from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { Voices } from "../resources/voices/client/Client";
export class Tts {
    constructor(_options = {}) {
        this._options = _options;
    }
    get voices() {
        var _a;
        return (_a = this._voices) !== null && _a !== void 0 ? _a : (this._voices = new Voices(this._options));
    }
    /**
     * Synthesizes one or more input texts into speech using the specified voice. If no voice is provided, a novel voice will be generated dynamically. Optionally, additional context can be included to influence the speech's style and prosody.
     *
     * The response includes the base64-encoded audio and metadata in JSON format.
     *
     * @param {Hume.tts.PostedTts} request
     * @param {Tts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.tts.UnprocessableEntityError}
     *
     * @example
     *     await client.tts.synthesizeJson({
     *         context: {
     *             utterances: [{
     *                     text: "How can people see beauty so differently?",
     *                     description: "A curious student with a clear and respectful tone, seeking clarification on Hume's ideas with a straightforward question."
     *                 }]
     *         },
     *         format: {
     *             type: "mp3"
     *         },
     *         numGenerations: 1,
     *         utterances: [{
     *                 text: "Beauty is no quality in things themselves: It exists merely in the mind which contemplates them.",
     *                 description: "Middle-aged masculine voice with a clear, rhythmic Scots lilt, rounded vowels, and a warm, steady tone with an articulate, academic quality."
     *             }]
     *     })
     */
    synthesizeJson(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__synthesizeJson(request, requestOptions));
    }
    __synthesizeJson(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/tts",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.tts.PostedTts.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.tts.ReturnTts.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Hume.tts.UnprocessableEntityError(
                            serializers.tts.HttpValidationError.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/tts.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Synthesizes one or more input texts into speech using the specified voice. If no voice is provided, a novel voice will be generated dynamically. Optionally, additional context can be included to influence the speech's style and prosody.
     *
     * The response contains the generated audio file in the requested format.
     * @throws {@link Hume.tts.UnprocessableEntityError}
     */
    synthesizeFile(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__synthesizeFile(request, requestOptions));
    }
    __synthesizeFile(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/tts/file",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.tts.PostedTts.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                responseType: "streaming",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Hume.tts.UnprocessableEntityError(
                            serializers.tts.HttpValidationError.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/tts/file.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Streams synthesized speech using the specified voice. If no voice is provided, a novel voice will be generated dynamically. Optionally, additional context can be included to influence the speech's style and prosody.
     *
     * The response is a stream of JSON objects including audio encoded in base64.
     */
    synthesizeJsonStreaming(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__synthesizeJsonStreaming(request, requestOptions));
    }
    __synthesizeJsonStreaming(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/tts/stream/json",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.tts.PostedTts.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                responseType: "sse",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: new core.Stream({
                        stream: _response.body,
                        parse: (data) =>
                            __awaiter(this, void 0, void 0, function* () {
                                return serializers.tts.SnippetAudioChunk.parseOrThrow(data, {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    breadcrumbsPrefix: ["response"],
                                });
                            }),
                        signal:
                            requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                        eventShape: {
                            type: "json",
                            messageTerminator: "\n",
                        },
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Hume.tts.UnprocessableEntityError(
                            serializers.tts.HttpValidationError.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/tts/stream/json.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Streams synthesized speech using the specified voice. If no voice is provided, a novel voice will be generated dynamically. Optionally, additional context can be included to influence the speech's style and prosody.
     * @throws {@link Hume.tts.UnprocessableEntityError}
     */
    synthesizeFileStreaming(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__synthesizeFileStreaming(request, requestOptions));
    }
    __synthesizeFileStreaming(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: urlJoin(
                    (_c =
                        (_b = yield core.Supplier.get(this._options.baseUrl)) !== null && _b !== void 0
                            ? _b
                            : yield core.Supplier.get(this._options.environment)) !== null && _c !== void 0
                        ? _c
                        : environments.HumeEnvironment.Production,
                    "v0/tts/stream/file",
                ),
                method: "POST",
                headers: mergeHeaders(
                    (_d = this._options) === null || _d === void 0 ? void 0 : _d.headers,
                    mergeOnlyDefinedHeaders(Object.assign({}, yield this._getCustomAuthorizationHeaders())),
                    requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers,
                ),
                contentType: "application/json",
                requestType: "json",
                body: serializers.tts.PostedTts.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                responseType: "streaming",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return { data: _response.body, rawResponse: _response.rawResponse };
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Hume.tts.UnprocessableEntityError(
                            serializers.tts.HttpValidationError.parseOrThrow(_response.error.body, {
                                unrecognizedObjectKeys: "passthrough",
                                allowUnrecognizedUnionMembers: true,
                                allowUnrecognizedEnumValues: true,
                                breadcrumbsPrefix: ["response"],
                            }),
                            _response.rawResponse,
                        );
                    default:
                        throw new errors.HumeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                            rawResponse: _response.rawResponse,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.HumeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.HumeTimeoutError("Timeout exceeded when calling POST /v0/tts/stream/file.");
                case "unknown":
                    throw new errors.HumeError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "X-Hume-Api-Key": apiKeyValue };
        });
    }
}
