/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { StateEmbeddingGenerationQueued } from "./StateEmbeddingGenerationQueued";
import { StateEmbeddingGenerationInProgress } from "./StateEmbeddingGenerationInProgress";
import { StateEmbeddingGenerationCompletedEmbeddingGeneration } from "./StateEmbeddingGenerationCompletedEmbeddingGeneration";
import { StateEmbeddingGenerationFailed } from "./StateEmbeddingGenerationFailed";
export declare const StateEmbeddingGeneration: core.serialization.Schema<
    serializers.expressionMeasurement.batch.StateEmbeddingGeneration.Raw,
    Hume.expressionMeasurement.batch.StateEmbeddingGeneration
>;
export declare namespace StateEmbeddingGeneration {
    type Raw =
        | StateEmbeddingGeneration.Queued
        | StateEmbeddingGeneration.InProgress
        | StateEmbeddingGeneration.Completed
        | StateEmbeddingGeneration.Failed;
    interface Queued extends StateEmbeddingGenerationQueued.Raw {
        status: "QUEUED";
    }
    interface InProgress extends StateEmbeddingGenerationInProgress.Raw {
        status: "IN_PROGRESS";
    }
    interface Completed extends StateEmbeddingGenerationCompletedEmbeddingGeneration.Raw {
        status: "COMPLETED";
    }
    interface Failed extends StateEmbeddingGenerationFailed.Raw {
        status: "FAILED";
    }
}
