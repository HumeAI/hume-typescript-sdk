/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { StateTrainingQueued } from "./StateTrainingQueued";
import { StateTrainingInProgress } from "./StateTrainingInProgress";
import { StateTrainingCompletedTraining } from "./StateTrainingCompletedTraining";
import { StateTrainingFailed } from "./StateTrainingFailed";
export declare const StateTraining: core.serialization.Schema<
    serializers.expressionMeasurement.batch.StateTraining.Raw,
    Hume.expressionMeasurement.batch.StateTraining
>;
export declare namespace StateTraining {
    type Raw = StateTraining.Queued | StateTraining.InProgress | StateTraining.Completed | StateTraining.Failed;
    interface Queued extends StateTrainingQueued.Raw {
        status: "QUEUED";
    }
    interface InProgress extends StateTrainingInProgress.Raw {
        status: "IN_PROGRESS";
    }
    interface Completed extends StateTrainingCompletedTraining.Raw {
        status: "COMPLETED";
    }
    interface Failed extends StateTrainingFailed.Raw {
        status: "FAILED";
    }
}
