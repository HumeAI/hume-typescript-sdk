/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { QueuedState } from "./QueuedState";
import { InProgressState } from "./InProgressState";
import { CompletedState } from "./CompletedState";
import { FailedState } from "./FailedState";
export declare const StateInference: core.serialization.Schema<
    serializers.expressionMeasurement.batch.StateInference.Raw,
    Hume.expressionMeasurement.batch.StateInference
>;
export declare namespace StateInference {
    type Raw = StateInference.Queued | StateInference.InProgress | StateInference.Completed | StateInference.Failed;
    interface Queued extends QueuedState.Raw {
        status: "QUEUED";
    }
    interface InProgress extends InProgressState.Raw {
        status: "IN_PROGRESS";
    }
    interface Completed extends CompletedState.Raw {
        status: "COMPLETED";
    }
    interface Failed extends FailedState.Raw {
        status: "FAILED";
    }
}
