/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { StateTlInferenceQueued } from "./StateTlInferenceQueued";
import { StateTlInferenceInProgress } from "./StateTlInferenceInProgress";
import { StateTlInferenceCompletedTlInference } from "./StateTlInferenceCompletedTlInference";
import { StateTlInferenceFailed } from "./StateTlInferenceFailed";
export declare const StateTlInference: core.serialization.Schema<
    serializers.expressionMeasurement.batch.StateTlInference.Raw,
    Hume.expressionMeasurement.batch.StateTlInference
>;
export declare namespace StateTlInference {
    type Raw =
        | StateTlInference.Queued
        | StateTlInference.InProgress
        | StateTlInference.Completed
        | StateTlInference.Failed;
    interface Queued extends StateTlInferenceQueued.Raw {
        status: "QUEUED";
    }
    interface InProgress extends StateTlInferenceInProgress.Raw {
        status: "IN_PROGRESS";
    }
    interface Completed extends StateTlInferenceCompletedTlInference.Raw {
        status: "COMPLETED";
    }
    interface Failed extends StateTlInferenceFailed.Raw {
        status: "FAILED";
    }
}
