/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HumeClient } from "../../src/Client";

const client = new HumeClient({
    environment: process.env.TESTS_BASE_URL || "test",
    apiKey: process.env.TESTS_AUTH || "test",
});

describe("Prompts", () => {
    test("listPrompts", async () => {
        const response = await client.empathicVoice.prompts.listPrompts();
        expect(response).toEqual({
            pageNumber: 1,
            pageSize: 1,
            promptsPage: [
                {
                    id: "id",
                    version: 1,
                    versionType: "version_type",
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    text: "text",
                },
            ],
        });
    });

    test("createPrompt", async () => {
        const response = await client.empathicVoice.prompts.createPrompt({
            name: "name",
            text: "text",
        });
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionType: "version_type",
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            text: "text",
        });
    });

    test("listPromptVersions", async () => {
        const response = await client.empathicVoice.prompts.listPromptVersions("id");
        expect(response).toEqual({
            pageNumber: 1,
            pageSize: 1,
            promptsPage: [
                {
                    id: "id",
                    version: 1,
                    versionType: "version_type",
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    text: "text",
                },
            ],
        });
    });

    test("createPromptVerison", async () => {
        const response = await client.empathicVoice.prompts.createPromptVerison("id", {
            text: "text",
        });
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionType: "version_type",
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            text: "text",
        });
    });

    test("deletePrompt", async () => {
        const response = await client.empathicVoice.prompts.deletePrompt("id");
        expect(response).toEqual(undefined);
    });

    test("updatePromptName", async () => {
        const response = await client.empathicVoice.prompts.updatePromptName("string", {
            name: "string",
        });
        expect(response).toEqual("string");
    });

    test("getPromptVersion", async () => {
        const response = await client.empathicVoice.prompts.getPromptVersion("id", 1);
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionType: "version_type",
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            text: "text",
        });
    });

    test("deletePromptVersion", async () => {
        const response = await client.empathicVoice.prompts.deletePromptVersion("id", 1);
        expect(response).toEqual(undefined);
    });

    test("updatePromptDescription", async () => {
        const response = await client.empathicVoice.prompts.updatePromptDescription("id", 1);
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionType: "version_type",
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            text: "text",
        });
    });
});
