/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HumeClient } from "../../src/Client";

const client = new HumeClient({
    environment: process.env.TESTS_BASE_URL || "test",
    apiKey: process.env.TESTS_AUTH || "test",
});

describe("Configs", () => {
    test("listConfigs", async () => {
        const response = await client.empathicVoice.configs.listConfigs();
        expect(response).toEqual({
            pageNumber: 1,
            pageSize: 1,
            configsPage: [
                {
                    id: "id",
                    version: 1,
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    prompt: {
                        id: "id",
                        version: 1,
                        versionType: "version_type",
                        name: "name",
                        createdOn: 1,
                        modifiedOn: 1,
                        text: "text",
                    },
                    voice: { provider: "provider", name: "name" },
                },
            ],
        });
    });

    test("createConfig", async () => {
        const response = await client.empathicVoice.configs.createConfig({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            prompt: {
                id: "id",
                version: 1,
                versionType: "version_type",
                versionDescription: "version_description",
                name: "name",
                createdOn: 1,
                modifiedOn: 1,
                text: "text",
            },
            voice: { provider: "provider", name: "name" },
            languageModel: { modelProvider: "model_provider", modelResource: "model_resource", temperature: 1.1 },
            tools: [
                {
                    toolType: "tool_type",
                    id: "id",
                    version: 1,
                    versionType: "version_type",
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    fallbackContent: "fallback_content",
                    description: "description",
                    parameters: "parameters",
                },
            ],
            builtinTools: [{ toolType: "tool_type", name: "name", fallbackContent: "fallback_content" }],
        });
    });

    test("listConfigVersions", async () => {
        const response = await client.empathicVoice.configs.listConfigVersions("id");
        expect(response).toEqual({
            pageNumber: 1,
            pageSize: 1,
            configsPage: [
                {
                    id: "id",
                    version: 1,
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    prompt: {
                        id: "id",
                        version: 1,
                        versionType: "version_type",
                        name: "name",
                        createdOn: 1,
                        modifiedOn: 1,
                        text: "text",
                    },
                    voice: { provider: "provider", name: "name" },
                },
            ],
        });
    });

    test("createConfigVersion", async () => {
        const response = await client.empathicVoice.configs.createConfigVersion("id");
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            prompt: {
                id: "id",
                version: 1,
                versionType: "version_type",
                versionDescription: "version_description",
                name: "name",
                createdOn: 1,
                modifiedOn: 1,
                text: "text",
            },
            voice: { provider: "provider", name: "name" },
            languageModel: { modelProvider: "model_provider", modelResource: "model_resource", temperature: 1.1 },
            tools: [
                {
                    toolType: "tool_type",
                    id: "id",
                    version: 1,
                    versionType: "version_type",
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    fallbackContent: "fallback_content",
                    description: "description",
                    parameters: "parameters",
                },
            ],
            builtinTools: [{ toolType: "tool_type", name: "name", fallbackContent: "fallback_content" }],
        });
    });

    test("deleteConfig", async () => {
        const response = await client.empathicVoice.configs.deleteConfig("id");
        expect(response).toEqual(undefined);
    });

    test("updateConfigName", async () => {
        const response = await client.empathicVoice.configs.updateConfigName("string", {
            name: "string",
        });
        expect(response).toEqual("string");
    });

    test("getConfigVersion", async () => {
        const response = await client.empathicVoice.configs.getConfigVersion("id", 1);
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            prompt: {
                id: "id",
                version: 1,
                versionType: "version_type",
                versionDescription: "version_description",
                name: "name",
                createdOn: 1,
                modifiedOn: 1,
                text: "text",
            },
            voice: { provider: "provider", name: "name" },
            languageModel: { modelProvider: "model_provider", modelResource: "model_resource", temperature: 1.1 },
            tools: [
                {
                    toolType: "tool_type",
                    id: "id",
                    version: 1,
                    versionType: "version_type",
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    fallbackContent: "fallback_content",
                    description: "description",
                    parameters: "parameters",
                },
            ],
            builtinTools: [{ toolType: "tool_type", name: "name", fallbackContent: "fallback_content" }],
        });
    });

    test("deleteConfigVersion", async () => {
        const response = await client.empathicVoice.configs.deleteConfigVersion("id", 1);
        expect(response).toEqual(undefined);
    });

    test("updateConfigDescription", async () => {
        const response = await client.empathicVoice.configs.updateConfigDescription("id", 1);
        expect(response).toEqual({
            id: "id",
            version: 1,
            versionDescription: "version_description",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            prompt: {
                id: "id",
                version: 1,
                versionType: "version_type",
                versionDescription: "version_description",
                name: "name",
                createdOn: 1,
                modifiedOn: 1,
                text: "text",
            },
            voice: { provider: "provider", name: "name" },
            languageModel: { modelProvider: "model_provider", modelResource: "model_resource", temperature: 1.1 },
            tools: [
                {
                    toolType: "tool_type",
                    id: "id",
                    version: 1,
                    versionType: "version_type",
                    versionDescription: "version_description",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    fallbackContent: "fallback_content",
                    description: "description",
                    parameters: "parameters",
                },
            ],
            builtinTools: [{ toolType: "tool_type", name: "name", fallbackContent: "fallback_content" }],
        });
    });
});
