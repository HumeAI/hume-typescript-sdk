/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HumeClient } from "../../src/Client";

const client = new HumeClient({
    environment: process.env.TESTS_BASE_URL || "test",
    apiKey: process.env.TESTS_AUTH || "test",
});

describe("Files", () => {
    test("listFiles", async () => {
        const response = await client.customModels.files.listFiles();
        expect(response).toEqual({
            content: [
                {
                    file: {
                        id: "id",
                        userId: "user_id",
                        dataType: "data_type",
                        isSanitized: true,
                        isOwnedByReader: true,
                    },
                    attributes: [{ name: "name", value: "value" }],
                },
            ],
            pageable: {
                offset: 1,
                sort: { empty: true, sorted: true, unsorted: true },
                paged: true,
                unpaged: true,
                pageNumber: 1,
                pageSize: 1,
            },
            total: 1,
            last: true,
            totalElements: 1,
            totalPages: 1,
            size: 1,
            number: 1,
            sort: { empty: true, sorted: true, unsorted: true },
            first: true,
            numberOfElements: 1,
            empty: true,
        });
    });

    test("createFiles", async () => {
        const response = await client.customModels.files.createFiles([
            {
                file: {
                    name: "name",
                    humeStorage: true,
                    dataType: "data_type",
                },
            },
        ]);
        expect(response).toEqual([
            {
                file: {
                    id: "id",
                    name: "name",
                    uri: "uri",
                    uploadUri: "upload_uri",
                    thumbnailUri: "thumbnail_uri",
                    userId: "user_id",
                    dataType: "data_type",
                    createdOn: 1,
                    modifiedOn: 1,
                    metadata: { metadata: {} },
                    humeStorage: true,
                    humeStorageUploadTimestamp: 1,
                    isSanitized: true,
                    isOwnedByReader: true,
                    isLinkedToPubliclyShared: true,
                    isLinkedToHumeModel: true,
                },
                attributes: [{ name: "name", value: "value" }],
            },
        ]);
    });

    test("getFile", async () => {
        const response = await client.customModels.files.getFile("id");
        expect(response).toEqual({
            file: {
                id: "id",
                name: "name",
                uri: "uri",
                uploadUri: "upload_uri",
                thumbnailUri: "thumbnail_uri",
                userId: "user_id",
                dataType: "data_type",
                createdOn: 1,
                modifiedOn: 1,
                metadata: { metadata: {} },
                humeStorage: true,
                humeStorageUploadTimestamp: 1,
                isSanitized: true,
                isOwnedByReader: true,
                isLinkedToPubliclyShared: true,
                isLinkedToHumeModel: true,
            },
            attributes: [{ name: "name", value: "value" }],
        });
    });

    test("deleteFile", async () => {
        const response = await client.customModels.files.deleteFile("id");
        expect(response).toEqual(undefined);
    });

    test("updateFileName", async () => {
        const response = await client.customModels.files.updateFileName("id", {
            name: "name",
        });
        expect(response).toEqual({
            file: {
                id: "id",
                name: "name",
                uri: "uri",
                uploadUri: "upload_uri",
                thumbnailUri: "thumbnail_uri",
                userId: "user_id",
                dataType: "data_type",
                createdOn: 1,
                modifiedOn: 1,
                metadata: { metadata: {} },
                humeStorage: true,
                humeStorageUploadTimestamp: 1,
                isSanitized: true,
                isOwnedByReader: true,
                isLinkedToPubliclyShared: true,
                isLinkedToHumeModel: true,
            },
            attributes: [{ name: "name", value: "value" }],
        });
    });

    test("getFilePredictions", async () => {
        const response = await client.customModels.files.getFilePredictions("id");
        expect(response).toEqual(undefined);
    });
});
