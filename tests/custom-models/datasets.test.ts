/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HumeClient } from "../../src/Client";

const client = new HumeClient({
    environment: process.env.TESTS_BASE_URL || "test",
    apiKey: process.env.TESTS_AUTH || "test",
});

describe("Datasets", () => {
    test("listDatasets", async () => {
        const response = await client.customModels.datasets.listDatasets();
        expect(response).toEqual({
            content: [
                {
                    id: "id",
                    name: "name",
                    latestVersion: {
                        id: "id",
                        userId: "user_id",
                        labelsFileUri: "labels_file_uri",
                        featureTypes: { feature_types: "CATEGORICAL" },
                        datasetId: "dataset_id",
                        datasetVersion: 1,
                        createdOn: 1,
                    },
                    modifiedOn: 1,
                    metadata: { metadata: {} },
                },
            ],
            pageable: {
                offset: 1,
                sort: { empty: true, sorted: true, unsorted: true },
                paged: true,
                unpaged: true,
                pageNumber: 1,
                pageSize: 1,
            },
            total: 1,
            last: true,
            totalElements: 1,
            totalPages: 1,
            size: 1,
            number: 1,
            sort: { empty: true, sorted: true, unsorted: true },
            first: true,
            numberOfElements: 1,
            empty: true,
        });
    });

    test("getDataset", async () => {
        const response = await client.customModels.datasets.getDataset("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            latestVersion: {
                id: "id",
                userId: "user_id",
                labelsFileUri: "labels_file_uri",
                featureTypes: { feature_types: "CATEGORICAL" },
                datasetId: "dataset_id",
                datasetVersion: 1,
                createdOn: 1,
            },
            modifiedOn: 1,
            metadata: { metadata: { metadata: { key: "value" } } },
        });
    });

    test("deleteDataset", async () => {
        const response = await client.customModels.datasets.deleteDataset("id");
        expect(response).toEqual(undefined);
    });

    test("listDatasetVersions", async () => {
        const response = await client.customModels.datasets.listDatasetVersions("id");
        expect(response).toEqual({
            content: [
                {
                    id: "id",
                    userId: "user_id",
                    labelsFileUri: "labels_file_uri",
                    featureTypes: { feature_types: "CATEGORICAL" },
                    datasetId: "dataset_id",
                    datasetVersion: 1,
                    createdOn: 1,
                },
            ],
            pageable: {
                offset: 1,
                sort: { empty: true, sorted: true, unsorted: true },
                paged: true,
                unpaged: true,
                pageNumber: 1,
                pageSize: 1,
            },
            total: 1,
            last: true,
            totalElements: 1,
            totalPages: 1,
            size: 1,
            number: 1,
            sort: { empty: true, sorted: true, unsorted: true },
            first: true,
            numberOfElements: 1,
            empty: true,
        });
    });

    test("listDatasetFiles", async () => {
        const response = await client.customModels.datasets.listDatasetFiles("id");
        expect(response).toEqual([
            {
                content: [
                    {
                        file: {
                            id: "id",
                            userId: "user_id",
                            dataType: "data_type",
                            isSanitized: true,
                            isOwnedByReader: true,
                        },
                    },
                ],
                pageable: { offset: 1, paged: true, unpaged: true, pageNumber: 1, pageSize: 1 },
                total: 1,
                last: true,
                totalElements: 1,
                totalPages: 1,
                size: 1,
                number: 1,
                sort: { empty: true, sorted: true, unsorted: true },
                first: true,
                numberOfElements: 1,
                empty: true,
            },
        ]);
    });

    test("getDatasetVersion", async () => {
        const response = await client.customModels.datasets.getDatasetVersion("id");
        expect(response).toEqual({
            id: "id",
            userId: "user_id",
            labelsFileUri: "labels_file_uri",
            featureTypeJsonUri: "feature_type_json_uri",
            datasetId: "dataset_id",
            datasetVersion: 1,
            createdOn: 1,
            isMostRecentVersion: true,
        });
    });

    test("listDatasetVersionFiles", async () => {
        const response = await client.customModels.datasets.listDatasetVersionFiles("id");
        expect(response).toEqual([
            {
                content: [
                    {
                        file: {
                            id: "id",
                            userId: "user_id",
                            dataType: "data_type",
                            isSanitized: true,
                            isOwnedByReader: true,
                        },
                    },
                ],
                pageable: { offset: 1, paged: true, unpaged: true, pageNumber: 1, pageSize: 1 },
                total: 1,
                last: true,
                totalElements: 1,
                totalPages: 1,
                size: 1,
                number: 1,
                sort: { empty: true, sorted: true, unsorted: true },
                first: true,
                numberOfElements: 1,
                empty: true,
            },
        ]);
    });
});
