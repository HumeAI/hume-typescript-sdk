/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { HumeClient } from "../../src/Client";

const client = new HumeClient({
    environment: process.env.TESTS_BASE_URL || "test",
    apiKey: process.env.TESTS_AUTH || "test",
});

describe("Models", () => {
    test("listModels", async () => {
        const response = await client.customModels.models.listModels();
        expect(response).toEqual({
            content: [
                {
                    id: "id",
                    name: "name",
                    createdOn: 1,
                    modifiedOn: 1,
                    totalStars: 1,
                    modelIsStarredByUser: true,
                    archived: true,
                    latestVersion: {
                        id: "id",
                        modelId: "model_id",
                        userId: "user_id",
                        version: "version",
                        sourceUri: "source_uri",
                        datasetVersionId: "dataset_version_id",
                        createdOn: 1,
                    },
                    isPubliclyShared: true,
                },
            ],
            pageable: {
                offset: 1,
                sort: { empty: true, sorted: true, unsorted: true },
                paged: true,
                unpaged: true,
                pageNumber: 1,
                pageSize: 1,
            },
            total: 1,
            last: true,
            totalElements: 1,
            totalPages: 1,
            size: 1,
            number: 1,
            sort: { empty: true, sorted: true, unsorted: true },
            first: true,
            numberOfElements: 1,
            empty: true,
        });
    });

    test("getModelDetails", async () => {
        const response = await client.customModels.models.getModelDetails("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            totalStars: 1,
            modelIsStarredByUser: true,
            archived: true,
            latestVersion: {
                id: "id",
                modelId: "model_id",
                userId: "user_id",
                version: "version",
                sourceUri: "source_uri",
                datasetVersionId: "dataset_version_id",
                createdOn: 1,
                metadata: { metadata: {} },
                description: "description",
                tags: [{ key: "key", value: "value" }],
                fileType: "video",
                targetFeature: "target_feature",
                taskType: "task_type",
                trainingJobId: "training_job_id",
            },
            isPubliclyShared: true,
        });
    });

    test("updateModelName", async () => {
        const response = await client.customModels.models.updateModelName("id", {
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            createdOn: 1,
            modifiedOn: 1,
            totalStars: 1,
            modelIsStarredByUser: true,
            archived: true,
            latestVersion: {
                id: "id",
                modelId: "model_id",
                userId: "user_id",
                version: "version",
                sourceUri: "source_uri",
                datasetVersionId: "dataset_version_id",
                createdOn: 1,
                metadata: { metadata: {} },
                description: "description",
                tags: [{ key: "key", value: "value" }],
                fileType: "video",
                targetFeature: "target_feature",
                taskType: "task_type",
                trainingJobId: "training_job_id",
            },
            isPubliclyShared: true,
        });
    });

    test("listModelVersions", async () => {
        const response = await client.customModels.models.listModelVersions();
        expect(response).toEqual([
            {
                id: "id",
                modelId: "model_id",
                userId: "user_id",
                version: "version",
                sourceUri: "source_uri",
                datasetVersionId: "dataset_version_id",
                createdOn: 1,
                metadata: { metadata: {} },
                description: "description",
                tags: [{ key: "key", value: "value" }],
                fileType: "video",
                targetFeature: "target_feature",
                taskType: "task_type",
                trainingJobId: "training_job_id",
            },
        ]);
    });

    test("getModelVersion", async () => {
        const response = await client.customModels.models.getModelVersion("id");
        expect(response).toEqual({
            id: "id",
            modelId: "model_id",
            userId: "user_id",
            version: "version",
            sourceUri: "source_uri",
            datasetVersionId: "dataset_version_id",
            createdOn: 1,
            metadata: { metadata: { metadata: { key: "value" } } },
            description: "description",
            tags: [{ key: "key", value: "value" }],
            fileType: "video",
            targetFeature: "target_feature",
            taskType: "task_type",
            trainingJobId: "training_job_id",
        });
    });

    test("updateModelDescription", async () => {
        const response = await client.customModels.models.updateModelDescription("id", "string");
        expect(response).toEqual({
            id: "id",
            modelId: "model_id",
            userId: "user_id",
            version: "version",
            sourceUri: "source_uri",
            datasetVersionId: "dataset_version_id",
            createdOn: 1,
            metadata: { metadata: { metadata: { key: "value" } } },
            description: "description",
            tags: [{ key: "key", value: "value" }],
            fileType: "video",
            targetFeature: "target_feature",
            taskType: "task_type",
            trainingJobId: "training_job_id",
        });
    });
});
