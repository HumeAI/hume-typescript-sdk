// This file was auto-generated by Fern from our API Definition.

import * as Hume from "../../../src/api/index";
import { HumeClient } from "../../../src/Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Voices", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = {
            page_number: 0,
            page_size: 10,
            total_pages: 1,
            voices_page: [
                { id: "c42352c0-4566-455d-b180-0f654b65b525", name: "David Hume", provider: "CUSTOM_VOICE" },
                { id: "d87352b0-26a3-4b11-081b-d157a5674d19", name: "Goliath Hume", provider: "CUSTOM_VOICE" },
            ],
        };
        server.mockEndpoint().get("/v0/tts/voices").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            pageNumber: 0,
            pageSize: 10,
            totalPages: 1,
            voicesPage: [
                {
                    id: "c42352c0-4566-455d-b180-0f654b65b525",
                    name: "David Hume",
                    provider: "CUSTOM_VOICE",
                },
                {
                    id: "d87352b0-26a3-4b11-081b-d157a5674d19",
                    name: "Goliath Hume",
                    provider: "CUSTOM_VOICE",
                },
            ],
        };
        const page = await client.tts.voices.list({
            provider: "CUSTOM_VOICE",
        });

        expect(expected.voicesPage).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.voicesPage).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = {};
        server.mockEndpoint().get("/v0/tts/voices").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.tts.voices.list({
                provider: "HUME_AI",
            });
        }).rejects.toThrow(Hume.tts.BadRequestError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = { generation_id: "795c949a-1510-4a80-9646-7d0863b023ab", name: "David Hume" };
        const rawResponseBody = {
            id: "c42352c0-4566-455d-b180-0f654b65b525",
            name: "David Hume",
            provider: "CUSTOM_VOICE",
        };
        server
            .mockEndpoint()
            .post("/v0/tts/voices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tts.voices.create({
            generationId: "795c949a-1510-4a80-9646-7d0863b023ab",
            name: "David Hume",
        });
        expect(response).toEqual({
            id: "c42352c0-4566-455d-b180-0f654b65b525",
            name: "David Hume",
            provider: "CUSTOM_VOICE",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = { generation_id: "generation_id", name: "name" };
        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/v0/tts/voices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tts.voices.create({
                generationId: "generation_id",
                name: "name",
            });
        }).rejects.toThrow(Hume.tts.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        server.mockEndpoint().delete("/v0/tts/voices").respondWith().statusCode(200).build();

        const response = await client.tts.voices.delete({
            name: "David Hume",
        });
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = {};
        server.mockEndpoint().delete("/v0/tts/voices").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.tts.voices.delete({
                name: "name",
            });
        }).rejects.toThrow(Hume.tts.BadRequestError);
    });
});
