/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { HumeClient } from "../../../src/Client";
import * as Hume from "../../../src/api/index";

describe("Tools", () => {
    test("list-tools (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = {
            page_number: 0,
            page_size: 2,
            total_pages: 1,
            tools_page: [
                {
                    tool_type: "FUNCTION",
                    id: "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                    version: 0,
                    version_type: "FIXED",
                    version_description: "Fetches user's current location.",
                    name: "get_current_location",
                    created_on: 1715267200693,
                    modified_on: 1715267200693,
                    fallback_content: "Unable to fetch location.",
                    description: "Fetches user's current location.",
                    parameters:
                        '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }}, "required": ["location"] }',
                },
                {
                    tool_type: "FUNCTION",
                    id: "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                    version: 0,
                    version_type: "FIXED",
                    version_description:
                        "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                    name: "get_current_weather",
                    created_on: 1715266126705,
                    modified_on: 1715266126705,
                    fallback_content: "Unable to fetch location.",
                    description: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                    parameters:
                        '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
                },
            ],
        };
        server.mockEndpoint().get("/v0/evi/tools").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            pageNumber: 0,
            pageSize: 2,
            totalPages: 1,
            toolsPage: [
                {
                    toolType: "FUNCTION",
                    id: "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                    version: 0,
                    versionType: "FIXED",
                    versionDescription: "Fetches user's current location.",
                    name: "get_current_location",
                    createdOn: 1715267200693,
                    modifiedOn: 1715267200693,
                    fallbackContent: "Unable to fetch location.",
                    description: "Fetches user's current location.",
                    parameters:
                        '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }}, "required": ["location"] }',
                },
                {
                    toolType: "FUNCTION",
                    id: "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                    version: 0,
                    versionType: "FIXED",
                    versionDescription:
                        "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                    name: "get_current_weather",
                    createdOn: 1715266126705,
                    modifiedOn: 1715266126705,
                    fallbackContent: "Unable to fetch location.",
                    description: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                    parameters:
                        '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
                },
            ],
        };
        const page = await client.empathicVoice.tools.listTools({
            pageNumber: 0,
            pageSize: 2,
        });
        expect(expected.toolsPage).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.toolsPage).toEqual(nextPage.data);
    });

    test("list-tools (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server.mockEndpoint().get("/v0/evi/tools").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.empathicVoice.tools.listTools();
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("create-tool (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = {
            name: "get_current_weather",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            version_description: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            description: "This tool is for getting the current weather.",
            fallback_content: "Unable to fetch current weather.",
        };
        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "aa9b71c4-723c-47ff-9f83-1a1829e74376",
            version: 0,
            version_type: "FIXED",
            version_description: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            name: "get_current_weather",
            created_on: 1715275452390,
            modified_on: 1715275452390,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .post("/v0/evi/tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.createTool({
            name: "get_current_weather",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            versionDescription: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            description: "This tool is for getting the current weather.",
            fallbackContent: "Unable to fetch current weather.",
        });
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "aa9b71c4-723c-47ff-9f83-1a1829e74376",
            version: 0,
            versionType: "FIXED",
            versionDescription: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            name: "get_current_weather",
            createdOn: 1715275452390,
            modifiedOn: 1715275452390,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("create-tool (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            version_description: undefined,
            description: undefined,
            parameters: "parameters",
            fallback_content: undefined,
        };
        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server
            .mockEndpoint()
            .post("/v0/evi/tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.empathicVoice.tools.createTool({
                name: "name",
                versionDescription: undefined,
                description: undefined,
                parameters: "parameters",
                fallbackContent: undefined,
            });
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("list-tool-versions (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = {
            page_number: 0,
            page_size: 10,
            total_pages: 1,
            tools_page: [
                {
                    tool_type: "FUNCTION",
                    id: "00183a3f-79ba-413d-9f3b-609864268bea",
                    version: 1,
                    version_type: "FIXED",
                    version_description:
                        "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                    name: "get_current_weather",
                    created_on: 1715277014228,
                    modified_on: 1715277602313,
                    fallback_content: "Unable to fetch current weather.",
                    description: "This tool is for getting the current weather.",
                    parameters:
                        '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            pageNumber: 0,
            pageSize: 10,
            totalPages: 1,
            toolsPage: [
                {
                    toolType: "FUNCTION",
                    id: "00183a3f-79ba-413d-9f3b-609864268bea",
                    version: 1,
                    versionType: "FIXED",
                    versionDescription:
                        "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                    name: "get_current_weather",
                    createdOn: 1715277014228,
                    modifiedOn: 1715277602313,
                    fallbackContent: "Unable to fetch current weather.",
                    description: "This tool is for getting the current weather.",
                    parameters:
                        '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
                },
            ],
        };
        const page = await client.empathicVoice.tools.listToolVersions("00183a3f-79ba-413d-9f3b-609864268bea");
        expect(expected.toolsPage).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.toolsPage).toEqual(nextPage.data);
    });

    test("list-tool-versions (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server.mockEndpoint().get("/v0/evi/tools/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.empathicVoice.tools.listToolVersions("id");
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("create-tool-version (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = {
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            version_description:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
        };
        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            version_type: "FIXED",
            version_description:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "get_current_weather",
            created_on: 1715277014228,
            modified_on: 1715277602313,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .post("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.createToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", {
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            versionDescription:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
        });
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            versionType: "FIXED",
            versionDescription:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "get_current_weather",
            createdOn: 1715277014228,
            modifiedOn: 1715277602313,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("create-tool-version (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = {
            version_description: undefined,
            description: undefined,
            parameters: "parameters",
            fallback_content: undefined,
        };
        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server
            .mockEndpoint()
            .post("/v0/evi/tools/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.empathicVoice.tools.createToolVersion("id", {
                versionDescription: undefined,
                description: undefined,
                parameters: "parameters",
                fallbackContent: undefined,
            });
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("delete-tool (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        server
            .mockEndpoint()
            .delete("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.empathicVoice.tools.deleteTool("00183a3f-79ba-413d-9f3b-609864268bea");
        expect(response).toEqual(undefined);
    });

    test("delete-tool (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server
            .mockEndpoint()
            .delete("/v0/evi/tools/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.empathicVoice.tools.deleteTool("id");
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("get-tool-version (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            version_type: "FIXED",
            version_description:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "string",
            created_on: 1715277014228,
            modified_on: 1715277602313,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .get("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.getToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1);
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            versionType: "FIXED",
            versionDescription:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "string",
            createdOn: 1715277014228,
            modifiedOn: 1715277602313,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("get-tool-version (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server
            .mockEndpoint()
            .get("/v0/evi/tools/id/version/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.empathicVoice.tools.getToolVersion("id", 1);
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("delete-tool-version (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        server
            .mockEndpoint()
            .delete("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.empathicVoice.tools.deleteToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1);
        expect(response).toEqual(undefined);
    });

    test("delete-tool-version (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });

        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server
            .mockEndpoint()
            .delete("/v0/evi/tools/id/version/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.empathicVoice.tools.deleteToolVersion("id", 1);
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });

    test("update-tool-description (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = {
            version_description:
                "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
        };
        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            version_type: "FIXED",
            version_description:
                "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
            name: "string",
            created_on: 1715277014228,
            modified_on: 1715277602313,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .patch("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.updateToolDescription(
            "00183a3f-79ba-413d-9f3b-609864268bea",
            1,
            {
                versionDescription:
                    "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
            },
        );
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            versionType: "FIXED",
            versionDescription:
                "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
            name: "string",
            createdOn: 1715277014228,
            modifiedOn: 1715277602313,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("update-tool-description (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({
            apiKey: "test",
            environment: { base: server.baseUrl, evi: server.baseUrl, tts: server.baseUrl, stream: server.baseUrl },
        });
        const rawRequestBody = { version_description: undefined };
        const rawResponseBody = { error: undefined, message: undefined, code: undefined };
        server
            .mockEndpoint()
            .patch("/v0/evi/tools/id/version/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.empathicVoice.tools.updateToolDescription("id", 1, {
                versionDescription: undefined,
            });
        }).rejects.toThrow(
            new Hume.empathicVoice.BadRequestError({
                error: undefined,
                message: undefined,
                code: undefined,
            }),
        );
    });
});
