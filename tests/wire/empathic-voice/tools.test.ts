/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { HumeClient } from "../../../src/Client";

describe("Tools", () => {
    test("create-tool", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "get_current_weather",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            version_description: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            description: "This tool is for getting the current weather.",
            fallback_content: "Unable to fetch current weather.",
        };
        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "aa9b71c4-723c-47ff-9f83-1a1829e74376",
            version: 0,
            version_type: "FIXED",
            version_description: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            name: "get_current_weather",
            created_on: 1715275452390,
            modified_on: 1715275452390,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .post("/v0/evi/tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.createTool({
            name: "get_current_weather",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            versionDescription: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            description: "This tool is for getting the current weather.",
            fallbackContent: "Unable to fetch current weather.",
        });
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "aa9b71c4-723c-47ff-9f83-1a1829e74376",
            version: 0,
            versionType: "FIXED",
            versionDescription: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
            name: "get_current_weather",
            createdOn: 1715275452390,
            modifiedOn: 1715275452390,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("create-tool-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            version_description:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
        };
        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            version_type: "FIXED",
            version_description:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "get_current_weather",
            created_on: 1715277014228,
            modified_on: 1715277602313,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .post("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.createToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", {
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
            versionDescription:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
        });
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            versionType: "FIXED",
            versionDescription:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "get_current_weather",
            createdOn: 1715277014228,
            modifiedOn: 1715277602313,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("delete-tool", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.empathicVoice.tools.deleteTool("00183a3f-79ba-413d-9f3b-609864268bea");
        expect(response).toEqual(undefined);
    });

    test("get-tool-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            version_type: "FIXED",
            version_description:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "string",
            created_on: 1715277014228,
            modified_on: 1715277602313,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .get("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.getToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1);
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            versionType: "FIXED",
            versionDescription:
                "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
            name: "string",
            createdOn: 1715277014228,
            modifiedOn: 1715277602313,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });

    test("delete-tool-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.empathicVoice.tools.deleteToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1);
        expect(response).toEqual(undefined);
    });

    test("update-tool-description", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            version_description:
                "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
        };
        const rawResponseBody = {
            tool_type: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            version_type: "FIXED",
            version_description:
                "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
            name: "string",
            created_on: 1715277014228,
            modified_on: 1715277602313,
            fallback_content: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        };
        server
            .mockEndpoint()
            .patch("/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.tools.updateToolDescription(
            "00183a3f-79ba-413d-9f3b-609864268bea",
            1,
            {
                versionDescription:
                    "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
            },
        );
        expect(response).toEqual({
            toolType: "FUNCTION",
            id: "00183a3f-79ba-413d-9f3b-609864268bea",
            version: 1,
            versionType: "FIXED",
            versionDescription:
                "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
            name: "string",
            createdOn: 1715277014228,
            modifiedOn: 1715277602313,
            fallbackContent: "Unable to fetch current weather.",
            description: "This tool is for getting the current weather.",
            parameters:
                '{ "type": "object", "properties": { "location": { "type": "string", "description": "The city and state, e.g. San Francisco, CA" }, "format": { "type": "string", "enum": ["celsius", "fahrenheit", "kelvin"], "description": "The temperature unit to use. Infer this from the users location." } }, "required": ["location", "format"] }',
        });
    });
});
