/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { HumeClient } from "../../../src/Client";

describe("CustomVoices", () => {
    test("create-custom-voice", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", base_voice: "ITO", parameter_model: "20241004-11parameter" };
        const rawResponseBody = {
            id: "id",
            version: 1,
            name: "name",
            created_on: 1000000,
            modified_on: 1000000,
            base_voice: "ITO",
            parameter_model: "20241004-11parameter",
            parameters: {
                gender: 1,
                assertiveness: 1,
                buoyancy: 1,
                confidence: 1,
                enthusiasm: 1,
                nasality: 1,
                relaxedness: 1,
                smoothness: 1,
                tepidity: 1,
                tightness: 1,
            },
        };
        server
            .mockEndpoint()
            .post("/v0/evi/custom_voices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.customVoices.createCustomVoice({
            name: "name",
            baseVoice: "ITO",
            parameterModel: "20241004-11parameter",
        });
        expect(response).toEqual({
            id: "id",
            version: 1,
            name: "name",
            createdOn: 1000000,
            modifiedOn: 1000000,
            baseVoice: "ITO",
            parameterModel: "20241004-11parameter",
            parameters: {
                gender: 1,
                assertiveness: 1,
                buoyancy: 1,
                confidence: 1,
                enthusiasm: 1,
                nasality: 1,
                relaxedness: 1,
                smoothness: 1,
                tepidity: 1,
                tightness: 1,
            },
        });
    });

    test("get-custom-voice", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            version: 1,
            name: "name",
            created_on: 1000000,
            modified_on: 1000000,
            base_voice: "ITO",
            parameter_model: "20241004-11parameter",
            parameters: {
                gender: 1,
                assertiveness: 1,
                buoyancy: 1,
                confidence: 1,
                enthusiasm: 1,
                nasality: 1,
                relaxedness: 1,
                smoothness: 1,
                tepidity: 1,
                tightness: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/v0/evi/custom_voices/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.customVoices.getCustomVoice("id");
        expect(response).toEqual({
            id: "id",
            version: 1,
            name: "name",
            createdOn: 1000000,
            modifiedOn: 1000000,
            baseVoice: "ITO",
            parameterModel: "20241004-11parameter",
            parameters: {
                gender: 1,
                assertiveness: 1,
                buoyancy: 1,
                confidence: 1,
                enthusiasm: 1,
                nasality: 1,
                relaxedness: 1,
                smoothness: 1,
                tepidity: 1,
                tightness: 1,
            },
        });
    });

    test("create-custom-voice-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", base_voice: "ITO", parameter_model: "20241004-11parameter" };
        const rawResponseBody = {
            id: "id",
            version: 1,
            name: "name",
            created_on: 1000000,
            modified_on: 1000000,
            base_voice: "ITO",
            parameter_model: "20241004-11parameter",
            parameters: {
                gender: 1,
                assertiveness: 1,
                buoyancy: 1,
                confidence: 1,
                enthusiasm: 1,
                nasality: 1,
                relaxedness: 1,
                smoothness: 1,
                tepidity: 1,
                tightness: 1,
            },
        };
        server
            .mockEndpoint()
            .post("/v0/evi/custom_voices/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.customVoices.createCustomVoiceVersion("id", {
            name: "name",
            baseVoice: "ITO",
            parameterModel: "20241004-11parameter",
        });
        expect(response).toEqual({
            id: "id",
            version: 1,
            name: "name",
            createdOn: 1000000,
            modifiedOn: 1000000,
            baseVoice: "ITO",
            parameterModel: "20241004-11parameter",
            parameters: {
                gender: 1,
                assertiveness: 1,
                buoyancy: 1,
                confidence: 1,
                enthusiasm: 1,
                nasality: 1,
                relaxedness: 1,
                smoothness: 1,
                tepidity: 1,
                tightness: 1,
            },
        });
    });

    test("delete-custom-voice", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v0/evi/custom_voices/id").respondWith().statusCode(200).build();

        const response = await client.empathicVoice.customVoices.deleteCustomVoice("id");
        expect(response).toEqual(undefined);
    });
});
