/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { HumeClient } from "../../../src/Client";

describe("Prompts", () => {
    test("create-prompt", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Weather Assistant Prompt",
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        };
        const rawResponseBody = {
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 0,
            version_type: "FIXED",
            version_description: undefined,
            name: "Weather Assistant Prompt",
            created_on: 1722633247488,
            modified_on: 1722633247488,
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        };
        server
            .mockEndpoint()
            .post("/v0/evi/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.prompts.createPrompt({
            name: "Weather Assistant Prompt",
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        });
        expect(response).toEqual({
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 0,
            versionType: "FIXED",
            versionDescription: undefined,
            name: "Weather Assistant Prompt",
            createdOn: 1722633247488,
            modifiedOn: 1722633247488,
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        });
    });

    test("list-prompt-versions", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            page_number: 0,
            page_size: 10,
            total_pages: 1,
            prompts_page: [
                {
                    id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
                    version: 0,
                    version_type: "FIXED",
                    version_description: "",
                    name: "Weather Assistant Prompt",
                    created_on: 1722633247488,
                    modified_on: 1722633247488,
                    text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.prompts.listPromptVersions("af699d45-2985-42cc-91b9-af9e5da3bac5");
        expect(response).toEqual({
            pageNumber: 0,
            pageSize: 10,
            totalPages: 1,
            promptsPage: [
                {
                    id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
                    version: 0,
                    versionType: "FIXED",
                    versionDescription: "",
                    name: "Weather Assistant Prompt",
                    createdOn: 1722633247488,
                    modifiedOn: 1722633247488,
                    text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                },
            ],
        });
    });

    test("create-prompt-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            text: "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
            version_description: "This is an updated version of the Weather Assistant Prompt.",
        };
        const rawResponseBody = {
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 1,
            version_type: "FIXED",
            version_description: "This is an updated version of the Weather Assistant Prompt.",
            name: "Weather Assistant Prompt",
            created_on: 1722633247488,
            modified_on: 1722635140150,
            text: "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        };
        server
            .mockEndpoint()
            .post("/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.prompts.createPromptVersion(
            "af699d45-2985-42cc-91b9-af9e5da3bac5",
            {
                text: "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                versionDescription: "This is an updated version of the Weather Assistant Prompt.",
            },
        );
        expect(response).toEqual({
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 1,
            versionType: "FIXED",
            versionDescription: "This is an updated version of the Weather Assistant Prompt.",
            name: "Weather Assistant Prompt",
            createdOn: 1722633247488,
            modifiedOn: 1722635140150,
            text: "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        });
    });

    test("delete-prompt", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.empathicVoice.prompts.deletePrompt("af699d45-2985-42cc-91b9-af9e5da3bac5");
        expect(response).toEqual(undefined);
    });

    test("get-prompt-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 0,
            version_type: "FIXED",
            version_description: "",
            name: "Weather Assistant Prompt",
            created_on: 1722633247488,
            modified_on: 1722633247488,
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        };
        server
            .mockEndpoint()
            .get("/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/0")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.prompts.getPromptVersion("af699d45-2985-42cc-91b9-af9e5da3bac5", 0);
        expect(response).toEqual({
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 0,
            versionType: "FIXED",
            versionDescription: "",
            name: "Weather Assistant Prompt",
            createdOn: 1722633247488,
            modifiedOn: 1722633247488,
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        });
    });

    test("delete-prompt-version", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.empathicVoice.prompts.deletePromptVersion(
            "af699d45-2985-42cc-91b9-af9e5da3bac5",
            1,
        );
        expect(response).toEqual(undefined);
    });

    test("update-prompt-description", async () => {
        const server = mockServerPool.createServer();
        const client = new HumeClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { version_description: "This is an updated version_description." };
        const rawResponseBody = {
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 1,
            version_type: "FIXED",
            version_description: "This is an updated version_description.",
            name: "string",
            created_on: 1722633247488,
            modified_on: 1722634770585,
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        };
        server
            .mockEndpoint()
            .patch("/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.empathicVoice.prompts.updatePromptDescription(
            "af699d45-2985-42cc-91b9-af9e5da3bac5",
            1,
            {
                versionDescription: "This is an updated version_description.",
            },
        );
        expect(response).toEqual({
            id: "af699d45-2985-42cc-91b9-af9e5da3bac5",
            version: 1,
            versionType: "FIXED",
            versionDescription: "This is an updated version_description.",
            name: "string",
            createdOn: 1722633247488,
            modifiedOn: 1722634770585,
            text: "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        });
    });
});
