/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from '../../../index';
import * as Hume from '../../../../api/index';
import * as core from '../../../../core';
import { ReturnConfigSpec } from './ReturnConfigSpec';

export const ReturnChat: core.serialization.ObjectSchema<
  serializers.empathicVoice.ReturnChat.Raw,
  Hume.empathicVoice.ReturnChat
> = core.serialization.object({
  id: core.serialization.string(),
  chatGroupId: core.serialization.property(
    'chat_group_id',
    core.serialization.string(),
  ),
  tag: core.serialization.string().optional(),
  status: core.serialization.string(),
  startTimestamp: core.serialization.property(
    'start_timestamp',
    core.serialization.number(),
  ),
  endTimestamp: core.serialization.property(
    'end_timestamp',
    core.serialization.number().optional(),
  ),
  eventCount: core.serialization.property(
    'event_count',
    core.serialization.number().optional(),
  ),
  metadata: core.serialization.string().optional(),
  config: ReturnConfigSpec.optional(),
});

export declare namespace ReturnChat {
  interface Raw {
    id: string;
    chat_group_id: string;
    tag?: string | null;
    status: string;
    start_timestamp: number;
    end_timestamp?: number | null;
    event_count?: number | null;
    metadata?: string | null;
    config?: ReturnConfigSpec.Raw | null;
  }
}
