// This file was auto-generated by Fern from our API Definition.

import type * as Hume from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import type * as serializers from "../../../index.js";
import { ChatMessage } from "./ChatMessage.js";
import { Inference } from "./Inference.js";
import { MillisecondInterval } from "./MillisecondInterval.js";

export const UserMessage: core.serialization.ObjectSchema<
    serializers.empathicVoice.UserMessage.Raw,
    Hume.empathicVoice.UserMessage
> = core.serialization.object({
    customSessionId: core.serialization.property("custom_session_id", core.serialization.string().optional()),
    fromText: core.serialization.property("from_text", core.serialization.boolean()),
    interim: core.serialization.boolean(),
    message: ChatMessage,
    models: Inference,
    time: MillisecondInterval,
    type: core.serialization.stringLiteral("user_message"),
});

export declare namespace UserMessage {
    export interface Raw {
        custom_session_id?: string | null;
        from_text: boolean;
        interim: boolean;
        message: ChatMessage.Raw;
        models: Inference.Raw;
        time: MillisecondInterval.Raw;
        type: "user_message";
    }
}
