/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Hume from "../../../../api/index";
import * as core from "../../../../core";

export const ReturnCustomVoice: core.serialization.ObjectSchema<
    serializers.empathicVoice.ReturnCustomVoice.Raw,
    Hume.empathicVoice.ReturnCustomVoice
> = core.serialization.object({
    id: core.serialization.string(),
    version: core.serialization.number(),
    name: core.serialization.string(),
    createdOn: core.serialization.property("created_on", core.serialization.number()),
    modifiedOn: core.serialization.property("modified_on", core.serialization.number()),
    baseVoice: core.serialization.property("base_voice", core.serialization.string()),
    parameterModel: core.serialization.property("parameter_model", core.serialization.string()),
    parameters: core.serialization.record(core.serialization.string(), core.serialization.number()),
});

export declare namespace ReturnCustomVoice {
    interface Raw {
        id: string;
        version: number;
        name: string;
        created_on: number;
        modified_on: number;
        base_voice: string;
        parameter_model: string;
        parameters: Record<string, number>;
    }
}
