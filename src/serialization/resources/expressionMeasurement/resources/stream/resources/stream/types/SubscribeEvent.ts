// This file was auto-generated by Fern from our API Definition.

import type * as Hume from "../../../../../../../../api/index.js";
import * as core from "../../../../../../../../core/index.js";
import type * as serializers from "../../../../../../../index.js";
import { StreamErrorMessage } from "./StreamErrorMessage.js";
import { StreamModelPredictions } from "./StreamModelPredictions.js";
import { StreamWarningMessage } from "./StreamWarningMessage.js";

export const SubscribeEvent: core.serialization.Schema<
    serializers.expressionMeasurement.stream.SubscribeEvent.Raw,
    Hume.expressionMeasurement.stream.SubscribeEvent
> = core.serialization.undiscriminatedUnion([StreamModelPredictions, StreamErrorMessage, StreamWarningMessage]);

export declare namespace SubscribeEvent {
    export type Raw = StreamModelPredictions.Raw | StreamErrorMessage.Raw | StreamWarningMessage.Raw;
}
