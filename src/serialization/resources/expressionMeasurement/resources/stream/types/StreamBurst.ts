/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { StreamBurstJobDetails } from "./StreamBurstJobDetails";
import { StreamBurstBurst } from "./StreamBurstBurst";
import { StreamBurstFace } from "./StreamBurstFace";
import { StreamBurstFacemesh } from "./StreamBurstFacemesh";
import { StreamBurstLanguage } from "./StreamBurstLanguage";
import { StreamBurstProsody } from "./StreamBurstProsody";

export const StreamBurst: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.StreamBurst.Raw,
    Hume.expressionMeasurement.StreamBurst
> = core.serialization.object({
    payloadId: core.serialization.property("payload_id", core.serialization.string().optional()),
    jobDetails: core.serialization.property("job_details", StreamBurstJobDetails.optional()),
    burst: StreamBurstBurst.optional(),
    face: StreamBurstFace.optional(),
    facemesh: StreamBurstFacemesh.optional(),
    language: StreamBurstLanguage.optional(),
    prosody: StreamBurstProsody.optional(),
});

export declare namespace StreamBurst {
    interface Raw {
        payload_id?: string | null;
        job_details?: StreamBurstJobDetails.Raw | null;
        burst?: StreamBurstBurst.Raw | null;
        face?: StreamBurstFace.Raw | null;
        facemesh?: StreamBurstFacemesh.Raw | null;
        language?: StreamBurstLanguage.Raw | null;
        prosody?: StreamBurstProsody.Raw | null;
    }
}
