/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Hume from "../../../../../../api";
import * as core from "../../../../../../core";
import { StreamBurst } from "./StreamBurst";
import { StreamError } from "./StreamError";
import { StreamJobDetails } from "./StreamJobDetails";

export const SubscribeEvent: core.serialization.Schema<
    serializers.expressionMeasurement.SubscribeEvent.Raw,
    Hume.expressionMeasurement.SubscribeEvent
> = core.serialization.undiscriminatedUnion([StreamBurst, StreamError, StreamJobDetails]);

export declare namespace SubscribeEvent {
    type Raw = StreamBurst.Raw | StreamError.Raw | StreamJobDetails.Raw;
}
