/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Config } from "./Config";
import { StreamErrorMessage } from "./StreamErrorMessage";
import { StreamWarningMessage } from "./StreamWarningMessage";

export const SubscribeEvent: core.serialization.Schema<
    serializers.expressionMeasurement.SubscribeEvent.Raw,
    Hume.expressionMeasurement.SubscribeEvent
> = core.serialization.undiscriminatedUnion([Config, StreamErrorMessage, StreamWarningMessage]);

export declare namespace SubscribeEvent {
    type Raw = Config.Raw | StreamErrorMessage.Raw | StreamWarningMessage.Raw;
}
