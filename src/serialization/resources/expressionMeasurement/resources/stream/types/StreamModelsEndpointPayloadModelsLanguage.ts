/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Hume from "../../../../../../api/index";
import * as core from "../../../../../../core";

export const StreamModelsEndpointPayloadModelsLanguage: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.StreamModelsEndpointPayloadModelsLanguage.Raw,
    Hume.expressionMeasurement.StreamModelsEndpointPayloadModelsLanguage
> = core.serialization.object({
    sentiment: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    toxicity: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    granularity: core.serialization.string().optional(),
});

export declare namespace StreamModelsEndpointPayloadModelsLanguage {
    interface Raw {
        sentiment?: Record<string, unknown> | null;
        toxicity?: Record<string, unknown> | null;
        granularity?: string | null;
    }
}
