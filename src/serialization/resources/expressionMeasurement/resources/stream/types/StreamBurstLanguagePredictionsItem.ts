/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from '../../../../../index';
import * as Hume from '../../../../../../api/index';
import * as core from '../../../../../../core';
import { TextPosition } from '../../../types/TextPosition';
import { EmotionEmbedding } from '../../../types/EmotionEmbedding';
import { Sentiment } from '../../../types/Sentiment';
import { Toxicity } from '../../../types/Toxicity';
import { EmotionEmbeddingItem } from '../../../types/EmotionEmbeddingItem';
import { SentimentItem } from '../../../types/SentimentItem';
import { ToxicityItem } from '../../../types/ToxicityItem';

export const StreamBurstLanguagePredictionsItem: core.serialization.ObjectSchema<
  serializers.expressionMeasurement.StreamBurstLanguagePredictionsItem.Raw,
  Hume.expressionMeasurement.StreamBurstLanguagePredictionsItem
> = core.serialization.object({
  text: core.serialization.string().optional(),
  position: TextPosition.optional(),
  emotions: EmotionEmbedding.optional(),
  sentiment: Sentiment.optional(),
  toxicity: Toxicity.optional(),
});

export declare namespace StreamBurstLanguagePredictionsItem {
  interface Raw {
    text?: string | null;
    position?: TextPosition.Raw | null;
    emotions?: EmotionEmbedding.Raw | null;
    sentiment?: Sentiment.Raw | null;
    toxicity?: Toxicity.Raw | null;
  }
}
