// This file was auto-generated by Fern from our API Definition.

import type * as Hume from "../../../../../../api/index.js";
import * as core from "../../../../../../core/index.js";
import type * as serializers from "../../../../../index.js";
import { StateEmbeddingGenerationCompletedEmbeddingGeneration } from "./StateEmbeddingGenerationCompletedEmbeddingGeneration.js";
import { StateEmbeddingGenerationFailed } from "./StateEmbeddingGenerationFailed.js";
import { StateEmbeddingGenerationInProgress } from "./StateEmbeddingGenerationInProgress.js";
import { StateEmbeddingGenerationQueued } from "./StateEmbeddingGenerationQueued.js";

export const StateEmbeddingGeneration: core.serialization.Schema<
    serializers.expressionMeasurement.batch.StateEmbeddingGeneration.Raw,
    Hume.expressionMeasurement.batch.StateEmbeddingGeneration
> = core.serialization
    .union("status", {
        QUEUED: StateEmbeddingGenerationQueued,
        IN_PROGRESS: StateEmbeddingGenerationInProgress,
        COMPLETED: StateEmbeddingGenerationCompletedEmbeddingGeneration,
        FAILED: StateEmbeddingGenerationFailed,
    })
    .transform<Hume.expressionMeasurement.batch.StateEmbeddingGeneration>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace StateEmbeddingGeneration {
    export type Raw =
        | StateEmbeddingGeneration.Queued
        | StateEmbeddingGeneration.InProgress
        | StateEmbeddingGeneration.Completed
        | StateEmbeddingGeneration.Failed;

    export interface Queued extends StateEmbeddingGenerationQueued.Raw {
        status: "QUEUED";
    }

    export interface InProgress extends StateEmbeddingGenerationInProgress.Raw {
        status: "IN_PROGRESS";
    }

    export interface Completed extends StateEmbeddingGenerationCompletedEmbeddingGeneration.Raw {
        status: "COMPLETED";
    }

    export interface Failed extends StateEmbeddingGenerationFailed.Raw {
        status: "FAILED";
    }
}
