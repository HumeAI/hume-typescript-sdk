/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index.js";
import * as Hume from "../../../../../../api/index.js";
import * as core from "../../../../../../core/index.js";
import { PositionInterval } from "./PositionInterval.js";
import { TimeInterval } from "./TimeInterval.js";
import { EmotionScore } from "./EmotionScore.js";
import { SentimentScore } from "./SentimentScore.js";
import { ToxicityScore } from "./ToxicityScore.js";

export const LanguagePrediction: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.batch.LanguagePrediction.Raw,
    Hume.expressionMeasurement.batch.LanguagePrediction
> = core.serialization.object({
    text: core.serialization.string(),
    position: PositionInterval,
    time: TimeInterval.optional(),
    confidence: core.serialization.number().optional(),
    speakerConfidence: core.serialization.property("speaker_confidence", core.serialization.number().optional()),
    emotions: core.serialization.list(EmotionScore),
    sentiment: core.serialization.list(SentimentScore).optional(),
    toxicity: core.serialization.list(ToxicityScore).optional(),
});

export declare namespace LanguagePrediction {
    export interface Raw {
        text: string;
        position: PositionInterval.Raw;
        time?: TimeInterval.Raw | null;
        confidence?: number | null;
        speaker_confidence?: number | null;
        emotions: EmotionScore.Raw[];
        sentiment?: SentimentScore.Raw[] | null;
        toxicity?: ToxicityScore.Raw[] | null;
    }
}
