// This file was auto-generated by Fern from our API Definition.

import type * as Hume from "../../../../../../api/index.js";
import * as core from "../../../../../../core/index.js";
import type * as serializers from "../../../../../index.js";
import { TrainingCustomModel } from "./TrainingCustomModel.js";

export const CompletedTraining: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.batch.CompletedTraining.Raw,
    Hume.expressionMeasurement.batch.CompletedTraining
> = core.serialization.object({
    createdTimestampMs: core.serialization.property("created_timestamp_ms", core.serialization.number()),
    startedTimestampMs: core.serialization.property("started_timestamp_ms", core.serialization.number()),
    endedTimestampMs: core.serialization.property("ended_timestamp_ms", core.serialization.number()),
    customModel: core.serialization.property("custom_model", TrainingCustomModel),
    alternatives: core.serialization.record(core.serialization.string(), TrainingCustomModel).optional(),
});

export declare namespace CompletedTraining {
    export interface Raw {
        created_timestamp_ms: number;
        started_timestamp_ms: number;
        ended_timestamp_ms: number;
        custom_model: TrainingCustomModel.Raw;
        alternatives?: Record<string, TrainingCustomModel.Raw> | null;
    }
}
