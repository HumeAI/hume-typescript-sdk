/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index.js";
import * as Hume from "../../../../../../api/index.js";
import * as core from "../../../../../../core/index.js";
import { StateTrainingQueued } from "./StateTrainingQueued.js";
import { StateTrainingInProgress } from "./StateTrainingInProgress.js";
import { StateTrainingCompletedTraining } from "./StateTrainingCompletedTraining.js";
import { StateTrainingFailed } from "./StateTrainingFailed.js";

export const StateTraining: core.serialization.Schema<
    serializers.expressionMeasurement.batch.StateTraining.Raw,
    Hume.expressionMeasurement.batch.StateTraining
> = core.serialization
    .union("status", {
        QUEUED: StateTrainingQueued,
        IN_PROGRESS: StateTrainingInProgress,
        COMPLETED: StateTrainingCompletedTraining,
        FAILED: StateTrainingFailed,
    })
    .transform<Hume.expressionMeasurement.batch.StateTraining>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace StateTraining {
    export type Raw = StateTraining.Queued | StateTraining.InProgress | StateTraining.Completed | StateTraining.Failed;

    export interface Queued extends StateTrainingQueued.Raw {
        status: "QUEUED";
    }

    export interface InProgress extends StateTrainingInProgress.Raw {
        status: "IN_PROGRESS";
    }

    export interface Completed extends StateTrainingCompletedTraining.Raw {
        status: "COMPLETED";
    }

    export interface Failed extends StateTrainingFailed.Raw {
        status: "FAILED";
    }
}
