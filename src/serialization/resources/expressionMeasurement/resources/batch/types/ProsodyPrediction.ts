// This file was auto-generated by Fern from our API Definition.

import type * as Hume from "../../../../../../api/index.js";
import * as core from "../../../../../../core/index.js";
import type * as serializers from "../../../../../index.js";
import { EmotionScore } from "./EmotionScore.js";
import { TimeInterval } from "./TimeInterval.js";

export const ProsodyPrediction: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.batch.ProsodyPrediction.Raw,
    Hume.expressionMeasurement.batch.ProsodyPrediction
> = core.serialization.object({
    text: core.serialization.string().optional(),
    time: TimeInterval,
    confidence: core.serialization.number().optional(),
    speakerConfidence: core.serialization.property("speaker_confidence", core.serialization.number().optional()),
    emotions: core.serialization.list(EmotionScore),
});

export declare namespace ProsodyPrediction {
    export interface Raw {
        text?: string | null;
        time: TimeInterval.Raw;
        confidence?: number | null;
        speaker_confidence?: number | null;
        emotions: EmotionScore.Raw[];
    }
}
