/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Hume from "../../../../api/index";
import * as core from "../../../../core";
import { Models } from "./Models";
import { Transcription } from "./Transcription";
import { File_ } from "./File_";

export const InferenceRequest: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.InferenceRequest.Raw,
    Hume.expressionMeasurement.InferenceRequest
> = core.serialization.object({
    models: Models.optional(),
    transcription: Transcription.optional(),
    urls: core.serialization.list(core.serialization.string()).optional(),
    registryFiles: core.serialization.property(
        "registry_files",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    text: core.serialization.list(core.serialization.string()).optional(),
    callbackUrl: core.serialization.property("callback_url", core.serialization.string().optional()),
    notify: core.serialization.boolean().optional(),
    files: core.serialization.list(File_),
});

export declare namespace InferenceRequest {
    interface Raw {
        models?: Models.Raw | null;
        transcription?: Transcription.Raw | null;
        urls?: string[] | null;
        registry_files?: string[] | null;
        text?: string[] | null;
        callback_url?: string | null;
        notify?: boolean | null;
        files: File_.Raw[];
    }
}
