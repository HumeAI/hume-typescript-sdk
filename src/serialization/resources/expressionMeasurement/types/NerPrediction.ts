/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Hume from "../../../../api/index";
import * as core from "../../../../core";
import { PositionInterval } from "./PositionInterval";
import { TimeInterval } from "./TimeInterval";
import { EmotionScore } from "./EmotionScore";

export const NerPrediction: core.serialization.ObjectSchema<
    serializers.expressionMeasurement.NerPrediction.Raw,
    Hume.expressionMeasurement.NerPrediction
> = core.serialization.object({
    entity: core.serialization.string(),
    position: PositionInterval,
    entityConfidence: core.serialization.property("entity_confidence", core.serialization.number()),
    support: core.serialization.number(),
    uri: core.serialization.string(),
    linkWord: core.serialization.property("link_word", core.serialization.string()),
    time: TimeInterval.optional(),
    confidence: core.serialization.number().optional(),
    speakerConfidence: core.serialization.property("speaker_confidence", core.serialization.number().optional()),
    emotions: core.serialization.list(EmotionScore),
});

export declare namespace NerPrediction {
    interface Raw {
        entity: string;
        position: PositionInterval.Raw;
        entity_confidence: number;
        support: number;
        uri: string;
        link_word: string;
        time?: TimeInterval.Raw | null;
        confidence?: number | null;
        speaker_confidence?: number | null;
        emotions: EmotionScore.Raw[];
    }
}
