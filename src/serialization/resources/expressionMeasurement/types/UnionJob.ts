/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Hume from "../../../../api/index";
import * as core from "../../../../core";
import { EmbeddingGenerationJob } from "./EmbeddingGenerationJob";
import { InferenceJob } from "./InferenceJob";
import { CustomModelsInferenceJob } from "./CustomModelsInferenceJob";
import { CustomModelsTrainingJob } from "./CustomModelsTrainingJob";

export const UnionJob: core.serialization.Schema<
    serializers.expressionMeasurement.UnionJob.Raw,
    Hume.expressionMeasurement.UnionJob
> = core.serialization
    .union("type", {
        EMBEDDING_GENERATION: EmbeddingGenerationJob,
        INFERENCE: InferenceJob,
        TL_INFERENCE: CustomModelsInferenceJob,
        TRAINING: CustomModelsTrainingJob,
    })
    .transform<Hume.expressionMeasurement.UnionJob>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace UnionJob {
    type Raw = UnionJob.EmbeddingGeneration | UnionJob.Inference | UnionJob.TlInference | UnionJob.Training;

    interface EmbeddingGeneration extends EmbeddingGenerationJob.Raw {
        type: "EMBEDDING_GENERATION";
    }

    interface Inference extends InferenceJob.Raw {
        type: "INFERENCE";
    }

    interface TlInference extends CustomModelsInferenceJob.Raw {
        type: "TL_INFERENCE";
    }

    interface Training extends CustomModelsTrainingJob.Raw {
        type: "TRAINING";
    }
}
