/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from '../../../index';
import * as Hume from '../../../../api/index';
import * as core from '../../../../core';
import { TimeInterval } from './TimeInterval';
import { EmotionScore } from './EmotionScore';

export const ProsodyPrediction: core.serialization.ObjectSchema<
  serializers.expressionMeasurement.ProsodyPrediction.Raw,
  Hume.expressionMeasurement.ProsodyPrediction
> = core.serialization.object({
  text: core.serialization.string().optional(),
  time: TimeInterval,
  confidence: core.serialization.number().optional(),
  speakerConfidence: core.serialization.property(
    'speaker_confidence',
    core.serialization.number().optional(),
  ),
  emotions: core.serialization.list(EmotionScore),
});

export declare namespace ProsodyPrediction {
  interface Raw {
    text?: string | null;
    time: TimeInterval.Raw;
    confidence?: number | null;
    speaker_confidence?: number | null;
    emotions: EmotionScore.Raw[];
  }
}
