/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Hume from "../../../../api/index";
import * as core from "../../../../core";
import { PostedContext } from "./PostedContext";
import { PostedUtterance } from "./PostedUtterance";
import { Format } from "./Format";

export const PostedTts: core.serialization.ObjectSchema<serializers.tts.PostedTts.Raw, Hume.tts.PostedTts> =
    core.serialization.object({
        context: PostedContext.optional(),
        utterances: core.serialization.list(PostedUtterance),
        numGenerations: core.serialization.property("num_generations", core.serialization.number().optional()),
        format: Format.optional(),
        splitUtterances: core.serialization.property("split_utterances", core.serialization.boolean().optional()),
        multiSpeaker: core.serialization.property("multi_speaker", core.serialization.boolean().optional()),
        stripHeaders: core.serialization.property("strip_headers", core.serialization.boolean().optional()),
        instantMode: core.serialization.property("instant_mode", core.serialization.boolean().optional()),
    });

export declare namespace PostedTts {
    export interface Raw {
        context?: PostedContext.Raw | null;
        utterances: PostedUtterance.Raw[];
        num_generations?: number | null;
        format?: Format.Raw | null;
        split_utterances?: boolean | null;
        multi_speaker?: boolean | null;
        strip_headers?: boolean | null;
        instant_mode?: boolean | null;
    }
}
