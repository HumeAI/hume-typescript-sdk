/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const ModelsInputModels: core.serialization.ObjectSchema<
    serializers.ModelsInputModels.Raw,
    Hume.ModelsInputModels
> = core.serialization.object({
    burst: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    face: core.serialization.lazyObject(async () => (await import("..")).ModelsInputModelsFace).optional(),
    facemesh: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    language: core.serialization.lazyObject(async () => (await import("..")).ModelsInputModelsLanguage).optional(),
    prosody: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
});

export declare namespace ModelsInputModels {
    interface Raw {
        burst?: Record<string, unknown> | null;
        face?: serializers.ModelsInputModelsFace.Raw | null;
        facemesh?: Record<string, unknown> | null;
        language?: serializers.ModelsInputModelsLanguage.Raw | null;
        prosody?: Record<string, unknown> | null;
    }
}
