/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const ModelsSuccess: core.serialization.ObjectSchema<serializers.ModelsSuccess.Raw, Hume.ModelsSuccess> =
    core.serialization.object({
        burst: core.serialization.lazyObject(async () => (await import("..")).ModelsSuccessBurst).optional(),
        face: core.serialization.lazyObject(async () => (await import("..")).ModelsSuccessFace).optional(),
        facemesh: core.serialization.lazyObject(async () => (await import("..")).ModelsSuccessFacemesh).optional(),
        language: core.serialization.lazyObject(async () => (await import("..")).ModelsSuccessLanguage).optional(),
        prosody: core.serialization.lazyObject(async () => (await import("..")).ModelsSuccessProsody).optional(),
    });

export declare namespace ModelsSuccess {
    interface Raw {
        burst?: serializers.ModelsSuccessBurst.Raw | null;
        face?: serializers.ModelsSuccessFace.Raw | null;
        facemesh?: serializers.ModelsSuccessFacemesh.Raw | null;
        language?: serializers.ModelsSuccessLanguage.Raw | null;
        prosody?: serializers.ModelsSuccessProsody.Raw | null;
    }
}
