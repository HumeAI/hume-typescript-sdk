/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const ModelsSuccessFacePredictionsItem: core.serialization.ObjectSchema<
    serializers.ModelsSuccessFacePredictionsItem.Raw,
    Hume.ModelsSuccessFacePredictionsItem
> = core.serialization.object({
    frame: core.serialization.number().optional(),
    time: core.serialization.number().optional(),
    bbox: core.serialization
        .lazyObject(async () => (await import("..")).BoundingBox)
        .optional(),
    prob: core.serialization.number().optional(),
    faceId: core.serialization.property(
        "face_id",
        core.serialization.string().optional()
    ),
    emotions: core.serialization
        .lazy(async () => (await import("..")).EmotionEmbedding)
        .optional(),
    facs: core.serialization
        .lazy(async () => (await import("..")).EmotionEmbedding)
        .optional(),
    descriptions: core.serialization
        .lazy(async () => (await import("..")).EmotionEmbedding)
        .optional(),
});

export declare namespace ModelsSuccessFacePredictionsItem {
    interface Raw {
        frame?: number | null;
        time?: number | null;
        bbox?: serializers.BoundingBox.Raw | null;
        prob?: number | null;
        face_id?: string | null;
        emotions?: serializers.EmotionEmbedding.Raw | null;
        facs?: serializers.EmotionEmbedding.Raw | null;
        descriptions?: serializers.EmotionEmbedding.Raw | null;
    }
}
