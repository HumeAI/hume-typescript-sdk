/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const LanguagePrediction: core.serialization.ObjectSchema<
    serializers.LanguagePrediction.Raw,
    Hume.LanguagePrediction
> = core.serialization.object({
    text: core.serialization.string(),
    position: core.serialization.lazyObject(
        async () => (await import("..")).PositionInterval
    ),
    time: core.serialization
        .lazyObject(async () => (await import("..")).TimeInterval)
        .optional(),
    confidence: core.serialization.number().optional(),
    speakerConfidence: core.serialization.property(
        "speaker_confidence",
        core.serialization.number().optional()
    ),
    emotions: core.serialization.list(
        core.serialization.lazyObject(
            async () => (await import("..")).EmotionScore
        )
    ),
    sentiment: core.serialization
        .list(
            core.serialization.lazyObject(
                async () => (await import("..")).SentimentScore
            )
        )
        .optional(),
    toxicity: core.serialization
        .list(
            core.serialization.lazyObject(
                async () => (await import("..")).ToxicityScore
            )
        )
        .optional(),
});

export declare namespace LanguagePrediction {
    interface Raw {
        text: string;
        position: serializers.PositionInterval.Raw;
        time?: serializers.TimeInterval.Raw | null;
        confidence?: number | null;
        speaker_confidence?: number | null;
        emotions: serializers.EmotionScore.Raw[];
        sentiment?: serializers.SentimentScore.Raw[] | null;
        toxicity?: serializers.ToxicityScore.Raw[] | null;
    }
}
