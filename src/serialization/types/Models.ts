/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const Models: core.serialization.ObjectSchema<serializers.Models.Raw, Hume.Models> = core.serialization.object({
    face: core.serialization.lazyObject(async () => (await import("..")).Face).optional(),
    burst: core.serialization.lazy(async () => (await import("..")).Empty).optional(),
    prosody: core.serialization.lazyObject(async () => (await import("..")).Prosody).optional(),
    language: core.serialization.lazyObject(async () => (await import("..")).Language).optional(),
    ner: core.serialization.lazyObject(async () => (await import("..")).Ner).optional(),
    facemesh: core.serialization.lazy(async () => (await import("..")).Empty).optional(),
});

export declare namespace Models {
    interface Raw {
        face?: serializers.Face.Raw | null;
        burst?: serializers.Empty.Raw | null;
        prosody?: serializers.Prosody.Raw | null;
        language?: serializers.Language.Raw | null;
        ner?: serializers.Ner.Raw | null;
        facemesh?: serializers.Empty.Raw | null;
    }
}
