/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const State: core.serialization.Schema<serializers.State.Raw, Hume.State> = core.serialization
    .union("type", {
        QUEUED: core.serialization.lazyObject(async () => (await import("..")).StateQueued),
        IN_PROGRESS: core.serialization.lazyObject(async () => (await import("..")).StateInProgress),
        COMPLETED: core.serialization.lazyObject(async () => (await import("..")).StateCompleted),
        FAILED: core.serialization.lazyObject(async () => (await import("..")).StateFailed),
    })
    .transform<Hume.State>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace State {
    type Raw = State.Queued | State.InProgress | State.Completed | State.Failed;

    interface Queued extends serializers.StateQueued.Raw {
        type: "QUEUED";
    }

    interface InProgress extends serializers.StateInProgress.Raw {
        type: "IN_PROGRESS";
    }

    interface Completed extends serializers.StateCompleted.Raw {
        type: "COMPLETED";
    }

    interface Failed extends serializers.StateFailed.Raw {
        type: "FAILED";
    }
}
