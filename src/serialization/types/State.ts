/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Hume from "../../api";
import * as core from "../../core";

export const State: core.serialization.Schema<
    serializers.State.Raw,
    Hume.State
> = core.serialization
    .union("status", {
        QUEUED: core.serialization.lazyObject(
            async () => (await import("..")).Queued
        ),
        IN_PROGRESS: core.serialization.lazyObject(
            async () => (await import("..")).InProgress
        ),
        COMPLETED: core.serialization.lazyObject(
            async () => (await import("..")).Completed
        ),
        FAILED: core.serialization.lazyObject(
            async () => (await import("..")).Failed
        ),
    })
    .transform<Hume.State>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace State {
    type Raw = State.Queued | State.InProgress | State.Completed | State.Failed;

    interface Queued extends serializers.Queued.Raw {
        status: "QUEUED";
    }

    interface InProgress extends serializers.InProgress.Raw {
        status: "IN_PROGRESS";
    }

    interface Completed extends serializers.Completed.Raw {
        status: "COMPLETED";
    }

    interface Failed extends serializers.Failed.Raw {
        status: "FAILED";
    }
}
