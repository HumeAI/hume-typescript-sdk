/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Hume from "../../../../../index.js";
import { mergeOnlyDefinedHeaders, mergeHeaders } from "../../../../../../core/headers.js";
import * as serializers from "../../../../../../serialization/index.js";
import { StreamInputSocket } from "./Socket.js";

export declare namespace StreamInput {
    export interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | environments.HumeEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface ConnectArgs {
        accessToken?: string | undefined;
        contextGenerationId?: string | undefined;
        formatType?: Hume.tts.AudioFormatType | undefined;
        includeTimestampTypes?: Hume.tts.TimestampType | undefined;
        instantMode?: boolean | undefined;
        noBinary?: boolean | undefined;
        stripHeaders?: boolean | undefined;
        version?: Hume.tts.OctaveVersion | undefined;
        apiKey?: string | undefined;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class StreamInput {
    protected readonly _options: StreamInput.Options;

    constructor(_options: StreamInput.Options = {}) {
        this._options = _options;
    }

    public async connect(args: StreamInput.ConnectArgs = {}): Promise<StreamInputSocket> {
        const {
            accessToken,
            contextGenerationId,
            formatType,
            includeTimestampTypes,
            instantMode,
            noBinary,
            stripHeaders,
            version,
            apiKey,
            headers,
            debug,
            reconnectAttempts,
        } = args;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (accessToken != null) {
            _queryParams["access_token"] = accessToken;
        }

        if (contextGenerationId != null) {
            _queryParams["context_generation_id"] = contextGenerationId;
        }

        if (formatType != null) {
            _queryParams["format_type"] = serializers.tts.AudioFormatType.jsonOrThrow(formatType, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeTimestampTypes != null) {
            if (Array.isArray(includeTimestampTypes)) {
                _queryParams["include_timestamp_types"] = includeTimestampTypes.map((item) =>
                    serializers.tts.TimestampType.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["include_timestamp_types"] = serializers.tts.TimestampType.jsonOrThrow(
                    includeTimestampTypes,
                    { unrecognizedObjectKeys: "strip" },
                );
            }
        }

        if (instantMode != null) {
            _queryParams["instant_mode"] = instantMode.toString();
        }

        if (noBinary != null) {
            _queryParams["no_binary"] = noBinary.toString();
        }

        if (stripHeaders != null) {
            _queryParams["strip_headers"] = stripHeaders.toString();
        }

        if (version != null) {
            _queryParams["version"] = serializers.tts.OctaveVersion.jsonOrThrow(version, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (apiKey != null) {
            _queryParams["api_key"] = apiKey;
        }

        let _headers: Record<string, unknown> = mergeHeaders(
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            headers,
        );
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options["baseUrl"])) ??
                    ((await core.Supplier.get(this._options["environment"])) ?? environments.HumeEnvironment.Prod).tts,
                "/stream/input",
            ),
            protocols: [],
            queryParameters: _queryParams,
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new StreamInputSocket({ socket });
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Hume-Api-Key": apiKeyValue };
    }
}
