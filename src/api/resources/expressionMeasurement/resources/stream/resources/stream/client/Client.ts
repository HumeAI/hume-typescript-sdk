// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions } from "../../../../../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers.js";
import * as core from "../../../../../../../../core/index.js";
import * as environments from "../../../../../../../../environments.js";
import { StreamSocket } from "./Socket.js";

export declare namespace Stream {
    export interface Options extends BaseClientOptions {}

    export interface ConnectArgs {
        "X-Hume-Api-Key": string;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Stream {
    protected readonly _options: Stream.Options;

    constructor(_options: Stream.Options = {}) {
        this._options = _options;
    }

    public async connect(args: Stream.ConnectArgs): Promise<StreamSocket> {
        const { headers, debug, reconnectAttempts } = args;
        const _headers: Record<string, unknown> = mergeHeaders(
            mergeOnlyDefinedHeaders({
                ...(await this._getCustomAuthorizationHeaders()),
                "X-Hume-Api-Key": args["X-Hume-Api-Key"],
            }),
            headers,
        );
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.HumeEnvironment.Prod).stream,
                "/models",
            ),
            protocols: [],
            queryParameters: {},
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new StreamSocket({ socket });
    }

    protected async _getCustomAuthorizationHeaders(): Promise<Record<string, string | undefined>> {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Hume-Api-Key": apiKeyValue };
    }
}
