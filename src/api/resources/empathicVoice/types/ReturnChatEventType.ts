/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * Type of Chat Event. There are eleven Chat Event types:
 * - `SYSTEM_PROMPT`: The system prompt used to initialize the session.
 * - `CHAT_START_MESSAGE`: Marks the beginning of the chat session.
 * - `USER_RECORDING_START_MESSAGE`: Marks when the client began streaming audio and the start of audio processing.
 * - `USER_MESSAGE`: A message sent by the user.
 * - `USER_INTERRUPTION`: A user-initiated interruption while the assistant is speaking.
 * - `AGENT_MESSAGE`: A response generated by the assistant.
 * - `FUNCTION_CALL`: A record of a tool invocation by the assistant.
 * - `FUNCTION_CALL_RESPONSE`: The result of a previously invoked function or tool.
 * - `PAUSE_ONSET`: Marks when the client sent a `pause_assistant_message` to pause the assistant.
 * - `RESUME_ONSET`: Marks when the client sent a `resume_assistant_message` to resume the assistant.
 * - `CHAT_END_MESSAGE`: Indicates the end of the chat session.
 */
export type ReturnChatEventType =
    | "FUNCTION_CALL"
    | "FUNCTION_CALL_RESPONSE"
    | "CHAT_END_MESSAGE"
    | "AGENT_MESSAGE"
    | "SYSTEM_PROMPT"
    | "USER_RECORDING_START_MESSAGE"
    | "RESUME_ONSET"
    | "USER_INTERRUPTION"
    | "CHAT_START_MESSAGE"
    | "PAUSE_ONSET"
    | "USER_MESSAGE";
export const ReturnChatEventType = {
    FunctionCall: "FUNCTION_CALL",
    FunctionCallResponse: "FUNCTION_CALL_RESPONSE",
    ChatEndMessage: "CHAT_END_MESSAGE",
    AgentMessage: "AGENT_MESSAGE",
    SystemPrompt: "SYSTEM_PROMPT",
    UserRecordingStartMessage: "USER_RECORDING_START_MESSAGE",
    ResumeOnset: "RESUME_ONSET",
    UserInterruption: "USER_INTERRUPTION",
    ChatStartMessage: "CHAT_START_MESSAGE",
    PauseOnset: "PAUSE_ONSET",
    UserMessage: "USER_MESSAGE",
} as const;
