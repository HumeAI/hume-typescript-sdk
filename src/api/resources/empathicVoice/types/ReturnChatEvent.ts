/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Hume from '../../../index';

/**
 * A description of a single event in a chat returned from the server
 */
export interface ReturnChatEvent {
  /** Identifier for a Chat Event. Formatted as a UUID. */
  id: string;
  /** Identifier for the Chat this event occurred in. Formatted as a UUID. */
  chatId: string;
  /** Time at which the Chat Event occurred. Measured in seconds since the Unix epoch. */
  timestamp: number;
  /**
   * The role of the entity which generated the Chat Event. There are four possible values:
   *
   * - `USER`: The user, capable of sending user messages and interruptions.
   *
   * - `AGENT`: The assistant, capable of sending agent messages.
   *
   * - `SYSTEM`: The backend server, capable of transmitting errors.
   *
   * - `TOOL`: The function calling mechanism.
   */
  role: Hume.empathicVoice.ReturnChatEventRole;
  /**
   * Type of Chat Event. There are six possible values:
   *
   * - `SYSTEM_PROMPT`: Contains the system prompt for use in the session.
   *
   * - `USER_MESSAGE`: Contains the message sent by the user.
   *
   * - `USER_INTERRUPTION`: Contains an interruption made by the user while the agent is speaking.
   *
   * - `AGENT_MESSAGE`: Contains the assistant’s message, generated by Hume’s eLLM and supplemental LLM.
   *
   * - `FUNCTION_CALL`: Contains the invocation of a tool.
   *
   * - `FUNCTION_CALL_RESPONSE`: Contains the tool response.
   */
  type: Hume.empathicVoice.ReturnChatEventType;
  /** The text of the Chat Event. This field contains the message content for each event type listed in the `type` field. */
  messageText?: string;
  /**
   * Stringified JSON containing the prosody model inference results.
   *
   * EVI uses the prosody model to measure 48 expressions related to speech and vocal characteristics. These results contain a detailed emotional and tonal analysis of the audio. Scores typically range from 0 to 1, with higher values indicating a stronger confidence level in the measured attribute.
   */
  emotionFeatures?: string;
  /** Stringified JSON with additional metadata about the chat event. */
  metadata?: string;
}
