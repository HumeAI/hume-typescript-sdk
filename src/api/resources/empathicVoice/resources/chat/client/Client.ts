/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import { mergeOnlyDefinedHeaders, mergeHeaders } from "../../../../../../core/headers.js";
import { ChatSocket } from "./Socket.js";

export declare namespace Chat {
    export interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | environments.HumeEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface ConnectArgs {
        accessToken?: string | undefined;
        configId?: string | undefined;
        configVersion?: number | undefined;
        eventLimit?: number | undefined;
        resumedChatGroupId?: string | undefined;
        sessionSettingsAudioChannels?: number | undefined;
        sessionSettingsAudioEncoding?: string | undefined;
        sessionSettingsAudioSampleRate?: number | undefined;
        sessionSettingsContextText?: string | undefined;
        sessionSettingsContextType?: string | undefined;
        sessionSettingsCustomSessionId?: string | undefined;
        sessionSettingsEventLimit?: number | undefined;
        sessionSettingsLanguageModelApiKey?: string | undefined;
        sessionSettingsSystemPrompt?: string | undefined;
        sessionSettingsVariables?: string | undefined;
        sessionSettingsVoiceId?: string | undefined;
        verboseTranscription?: boolean | undefined;
        apiKey?: string | undefined;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Chat {
    protected readonly _options: Chat.Options;

    constructor(_options: Chat.Options = {}) {
        this._options = _options;
    }

    public async connect(args: Chat.ConnectArgs = {}): Promise<ChatSocket> {
        const {
            accessToken,
            configId,
            configVersion,
            eventLimit,
            resumedChatGroupId,
            sessionSettingsAudioChannels,
            sessionSettingsAudioEncoding,
            sessionSettingsAudioSampleRate,
            sessionSettingsContextText,
            sessionSettingsContextType,
            sessionSettingsCustomSessionId,
            sessionSettingsEventLimit,
            sessionSettingsLanguageModelApiKey,
            sessionSettingsSystemPrompt,
            sessionSettingsVariables,
            sessionSettingsVoiceId,
            verboseTranscription,
            apiKey,
            headers,
            debug,
            reconnectAttempts,
        } = args;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (accessToken != null) {
            _queryParams["access_token"] = accessToken;
        }

        if (configId != null) {
            _queryParams["config_id"] = configId;
        }

        if (configVersion != null) {
            _queryParams["config_version"] = configVersion.toString();
        }

        if (eventLimit != null) {
            _queryParams["event_limit"] = eventLimit.toString();
        }

        if (resumedChatGroupId != null) {
            _queryParams["resumed_chat_group_id"] = resumedChatGroupId;
        }

        if (sessionSettingsAudioChannels != null) {
            _queryParams["session_settings[audio][channels]"] = sessionSettingsAudioChannels.toString();
        }

        if (sessionSettingsAudioEncoding != null) {
            _queryParams["session_settings[audio][encoding]"] = sessionSettingsAudioEncoding;
        }

        if (sessionSettingsAudioSampleRate != null) {
            _queryParams["session_settings[audio][sample_rate]"] = sessionSettingsAudioSampleRate.toString();
        }

        if (sessionSettingsContextText != null) {
            _queryParams["session_settings[context][text]"] = sessionSettingsContextText;
        }

        if (sessionSettingsContextType != null) {
            _queryParams["session_settings[context][type]"] = sessionSettingsContextType;
        }

        if (sessionSettingsCustomSessionId != null) {
            _queryParams["session_settings[custom_session_id]"] = sessionSettingsCustomSessionId;
        }

        if (sessionSettingsEventLimit != null) {
            _queryParams["session_settings[event_limit]"] = sessionSettingsEventLimit.toString();
        }

        if (sessionSettingsLanguageModelApiKey != null) {
            _queryParams["session_settings[language_model_api_key]"] = sessionSettingsLanguageModelApiKey;
        }

        if (sessionSettingsSystemPrompt != null) {
            _queryParams["session_settings[system_prompt]"] = sessionSettingsSystemPrompt;
        }

        if (sessionSettingsVariables != null) {
            _queryParams["session_settings[variables]"] = sessionSettingsVariables;
        }

        if (sessionSettingsVoiceId != null) {
            _queryParams["session_settings[voice_id]"] = sessionSettingsVoiceId;
        }

        if (verboseTranscription != null) {
            _queryParams["verbose_transcription"] = verboseTranscription.toString();
        }

        if (apiKey != null) {
            _queryParams["api_key"] = apiKey;
        }

        let _headers: Record<string, unknown> = mergeHeaders(
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            headers,
        );
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options["baseUrl"])) ??
                    ((await core.Supplier.get(this._options["environment"])) ?? environments.HumeEnvironment.Prod).evi,
                "/chat",
            ),
            protocols: [],
            queryParameters: _queryParams,
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new ChatSocket({ socket });
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Hume-Api-Key": apiKeyValue };
    }
}
